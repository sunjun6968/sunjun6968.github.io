<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue基础</title>
    <link href="/2021/03/08/vue%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/03/08/vue%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="vue基础"><a href="#vue基础" class="headerlink" title="vue基础"></a>vue基础</h1><h3 id="一-vue第一天"><a href="#一-vue第一天" class="headerlink" title="一.vue第一天"></a>一.vue第一天</h3><h4 id="1-什么是vue"><a href="#1-什么是vue" class="headerlink" title="1.什么是vue"></a>1.什么是vue</h4><h5 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h5><p>vue是一套用于构建用户界面的渐进式框架(JavaScript)</p><p>特点:易用,灵活,高效</p><p>版本:2.6</p><p>作者:尤雨溪</p><p>兼容:ie8以上</p><h5 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法"></a>2.使用方法</h5><p>(1).引入vue.js</p><p>(2).创建挂载节点标签(不能是body或html)</p><p>(3).实例化vue对象{el,data}</p><h5 id="3-mvvm"><a href="#3-mvvm" class="headerlink" title="3.mvvm"></a>3.mvvm</h5><p>m:model</p><p>v:view</p><p>data里面的数据一旦变化，模板里面会自动更新！</p><h4 id="2-vue指令"><a href="#2-vue指令" class="headerlink" title="2.vue指令"></a>2.vue指令</h4><h5 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1.介绍:"></a>1.介绍:</h5><p>自定义属性,以v-开头</p><p>&lt;标签 v-指令名=’变量/表达式’/&gt;</p><h5 id="2-常用指令"><a href="#2-常用指令" class="headerlink" title="2.常用指令"></a>2.常用指令</h5><p>v-html(渲染内容,可以编译html字符串)</p><p>v-text(渲染内容)</p><p>v-cloak(防止闪烁)</p><p>v-pre(跳过编译)</p><p>v-once(一次绑定)</p><p>v-on(绑定事件)</p><p>v-bind(绑定属性)</p><p>v-model(双向绑定)</p><p>v-if : v-if,v-else-if,else-if</p><p>v-for</p><h4 id="3-vue事件"><a href="#3-vue事件" class="headerlink" title="3.vue事件"></a>3.vue事件</h4><h5 id="1-绑定"><a href="#1-绑定" class="headerlink" title="1.绑定"></a>1.绑定</h5><p>(1).&lt;标签 v-on:事件类型=”事件函数” /&gt;</p><p>(2).&lt;标签 v-on:事件类型=”事件函数()” /&gt;</p><p>(3).&lt;标签 @事件类型=”事件函数” /&gt;</p><p>new里面添加methods属性</p><h5 id="2-传参"><a href="#2-传参" class="headerlink" title="2.传参"></a>2.传参</h5><p>&lt;标签 @事件类型=”事件函数(实参)” /&gt;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>   el:<span class="hljs-string">&quot;&quot;</span>,<br>  data:&#123;&#125;,<br>  methods:&#123;<br>    事件函数(形参)&#123; ... &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="3-事件对象"><a href="#3-事件对象" class="headerlink" title="3.事件对象"></a>3.事件对象</h5><p>&lt;标签 @事件类型=”事件函数($event)” /&gt;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>   el:<span class="hljs-string">&quot;&quot;</span>,<br>  data:&#123;&#125;,<br>  methods:&#123;<br>    事件函数(形参)&#123;  <span class="hljs-comment">// 形参就是事件对象</span><br>           ...<br>   &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="4-既传参又获取事件对象"><a href="#4-既传参又获取事件对象" class="headerlink" title="4.既传参又获取事件对象"></a>4.既传参又获取事件对象</h5><p>&lt;标签 @事件类型=”事件函数($event,实参)” /&gt;</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>   el:<span class="hljs-string">&quot;&quot;</span>,<br>  data:&#123;&#125;,<br>  methods:&#123;<br>    事件函数(形参<span class="hljs-number">1</span>，形参<span class="hljs-number">2</span>)&#123;  <span class="hljs-comment">// 形参1就是事件对象</span><br>           ...<br>   &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="5-事件简写"><a href="#5-事件简写" class="headerlink" title="5.事件简写"></a>5.事件简写</h5><p>&lt;标签 @事件类型=”变量赋值操作” /&gt;</p><h5 id="6-事件修饰符"><a href="#6-事件修饰符" class="headerlink" title="6.事件修饰符"></a>6.事件修饰符</h5><h6 id="1-修饰符"><a href="#1-修饰符" class="headerlink" title="1.修饰符"></a>1.修饰符</h6><p>&lt;标签 @事件类型.修饰符=”事件函数” /&gt;</p><p>内容:</p><p>.stop    .prevent    .self   .capture     .once        …</p><h6 id="2-按键修饰符"><a href="#2-按键修饰符" class="headerlink" title="2.按键修饰符"></a>2.按键修饰符</h6><p>{ keydown,keyup,keypress,input}</p><p>(input,textarea)</p><p>自定义按键修饰符:Vue.config.keyCodes.修饰符名 = 按键码</p><h4 id="4-vue样式"><a href="#4-vue样式" class="headerlink" title="4.vue样式"></a>4.vue样式</h4><h5 id="1-class样式"><a href="#1-class样式" class="headerlink" title="1.class样式"></a>1.class样式</h5><p>(1)对象:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;标签 :class=&quot;&#123; class名1:变量1，class名2:变量2 &#125;&quot; /&gt;<br></code></pre></td></tr></table></figure><p>(2).数组:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;标签 :class=&quot;[变量1，变量2,&#x27;class名1&#x27;,&#x27;class名2&#x27;]&quot; /&gt;<br></code></pre></td></tr></table></figure><p>(3).属性绑定:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;标签 :class=&quot;条件 ？ &#x27;class名1&#x27;:&#x27;class名2&#x27; &quot; /&gt;<br></code></pre></td></tr></table></figure><h5 id="2-style样式"><a href="#2-style样式" class="headerlink" title="2.style样式"></a>2.style样式</h5><p>(1).对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;标签 :style=&quot;&#123; css属性名名1:变量1，css属性名2:变量2 &#125;&quot; /&gt;<br></code></pre></td></tr></table></figure><p>(2).数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;标签 :style=&quot;[变量1，变量2]&quot; /&gt;<br><br><br>变量1:&#123; css属性名:css属性值 &#125;<br>变量2:&#123; css属性名:css属性值 &#125;<br></code></pre></td></tr></table></figure><p>(3).属性绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;标签 style=&quot;font-size:20px;border-color:red&quot; /&gt;<br><br>&lt;标签 :style=&quot;`font-size:$&#123;a&#125;;border-color:$&#123;b&#125;`&quot; /&gt;<br><br></code></pre></td></tr></table></figure><h4 id="5-v-if与v-for"><a href="#5-v-if与v-for" class="headerlink" title="5.v-if与v-for"></a>5.v-if与v-for</h4><h6 id="1-v-if"><a href="#1-v-if" class="headerlink" title="(1).v-if."></a>(1).v-if.</h6><p>v-if.           v-else-if.      v-else</p><h6 id="2-v-for"><a href="#2-v-for" class="headerlink" title="(2).v-for"></a>(2).v-for</h6><p>用法:</p><p>①v-for=”值 in 数组/对象”</p><p>②v-for=”(值,键) in 数组/对象”</p><p>③v-for=”(值,键,索引) in 对象”</p><p>key问题</p><p>嵌套循环</p><h3 id="二-vue第二天"><a href="#二-vue第二天" class="headerlink" title="二.vue第二天"></a>二.vue第二天</h3><h4 id="1-表单"><a href="#1-表单" class="headerlink" title="1.表单"></a>1.表单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">v-model【input,select,textarea】<br></code></pre></td></tr></table></figure><p>一个表单一般只用一个对象来存储数据</p><p>重置功能</p><h6 id="1-单选"><a href="#1-单选" class="headerlink" title="(1)单选"></a>(1)单选</h6><p>每个单选项都有value</p><p>同一个v-model</p><h6 id="2-多选"><a href="#2-多选" class="headerlink" title="(2)多选"></a>(2)多选</h6><p>每个多选项都有value</p><p>同一个v-model</p><p>v-model绑定的是一个数组</p><h6 id="3-勾选"><a href="#3-勾选" class="headerlink" title="(3)勾选"></a>(3)勾选</h6><p>v-model=”布尔值”</p><h6 id="4-下拉"><a href="#4-下拉" class="headerlink" title="(4)下拉"></a>(4)下拉</h6><p>select  v-model</p><h4 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2.自定义指令"></a>2.自定义指令</h4><p>(1)目的：自己开发操作DOM的指令，解决内置指令不满足开发需求</p><p>(2)定义</p><p>①全局注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.directive(<span class="hljs-string">&#x27;指令名&#x27;</span>,&#123;<br>    <span class="hljs-function"><span class="hljs-title">inserted</span>(<span class="hljs-params">el,binding</span>)</span>&#123;<br>        <span class="hljs-comment">// el 是使用指令的DOM，binding.value是指令绑定的数据</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>②局部注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>   ...,<br>  directives:&#123;<br>    <span class="hljs-string">&#x27;指令名&#x27;</span>:&#123;<br>      <span class="hljs-function"><span class="hljs-title">inserted</span>(<span class="hljs-params">el,binding</span>)</span>&#123;<br>        <span class="hljs-comment">// el 是使用指令的DOM，binding.value是指令绑定的数据</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="3-计算属性"><a href="#3-计算属性" class="headerlink" title="3.计算属性"></a>3.计算属性</h4><h6 id="1-本质-属性-需要计算"><a href="#1-本质-属性-需要计算" class="headerlink" title="(1)本质:属性,需要计算"></a>(1)本质:属性,需要计算</h6><h6 id="2-目的-简化模板书写"><a href="#2-目的-简化模板书写" class="headerlink" title="(2)目的:简化模板书写"></a>(2)目的:简化模板书写</h6><h6 id="3-书写"><a href="#3-书写" class="headerlink" title="(3)书写/"></a>(3)书写/</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">computed:&#123;<br>   属性名()&#123;<br>     <span class="hljs-keyword">return</span> xxx<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(4)注意点:</p><p>①不能修改,真要修改,要改变属性</p><p>②和methods区别:</p><p>计算属性依赖的内容发生了变化才会重新计算</p><p>methodes里面方法是只要模板更新,就会重新调用</p><h4 id="4-侦听器"><a href="#4-侦听器" class="headerlink" title="4.侦听器"></a>4.侦听器</h4><h6 id="1-目的-监听data里面数据的变化"><a href="#1-目的-监听data里面数据的变化" class="headerlink" title="(1)目的:监听data里面数据的变化"></a>(1)目的:监听data里面数据的变化</h6><h6 id="2-书写"><a href="#2-书写" class="headerlink" title="(2)书写"></a>(2)书写</h6><p>① 浅监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">watch:&#123;<br>   data里面变量(newval,oldval)&#123; ...  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>②深监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">watch:&#123;<br>   deep:<span class="hljs-literal">true</span>,<br>   <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newval</span>)</span>&#123;<br>      ...<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-过滤器"><a href="#5-过滤器" class="headerlink" title="5.过滤器"></a>5.过滤器</h4><h6 id="1-目的-对模板数据进行加工处理"><a href="#1-目的-对模板数据进行加工处理" class="headerlink" title="(1)目的:对模板数据进行加工处理"></a>(1)目的:对模板数据进行加工处理</h6><h6 id="2-使用"><a href="#2-使用" class="headerlink" title="(2)使用:"></a>(2)使用:</h6><p>①全局注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.filter(<span class="hljs-string">&#x27;过滤器名&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val,形参</span>)</span>&#123;<br>   <span class="hljs-keyword">return</span> xxx<br>&#125;)<br></code></pre></td></tr></table></figure><p>②局部注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>   ...,<br>   filters:&#123;<br>      过滤器名:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val,形参</span>)</span>&#123;<br>          <span class="hljs-keyword">return</span>  xxx<br>      &#125;<br>   &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>③使用</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">变量</span> | 过滤器 &#125;&#125;</span><br><br><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">变量</span> | 过滤器(<span class="hljs-name">实参</span>) &#125;&#125;</span><br><br><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">变量</span> | 过滤器1 | 过滤器2 &#125;&#125;</span><br><br><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">变量</span> | 过滤器1（实参） | 过滤器2 &#125;&#125;</span><br><br></code></pre></td></tr></table></figure><h4 id="6-生命周期"><a href="#6-生命周期" class="headerlink" title="6.生命周期"></a>6.生命周期</h4><p>四个阶段,八个钩子函数</p><h6 id="1-创建阶段"><a href="#1-创建阶段" class="headerlink" title="(1)创建阶段"></a>(1)创建阶段</h6><p>①beforeCreate</p><p>②created 【重要】 最先可以操作data里面数据的地方</p><h6 id="2-挂载阶段"><a href="#2-挂载阶段" class="headerlink" title="(2)挂载阶段"></a>(2)挂载阶段</h6><p>beforeMount</p><p>mounted 【重要】 模板编译渲染才真是完成</p><h6 id="3-更新阶段"><a href="#3-更新阶段" class="headerlink" title="(3)更新阶段"></a>(3)更新阶段</h6><p>beforeUpdate</p><p>updated</p><h6 id="4-消亡阶段"><a href="#4-消亡阶段" class="headerlink" title="(4)消亡阶段"></a>(4)消亡阶段</h6><p>beforeDestroy</p><p>destroyed</p><h3 id="三-vue第三天"><a href="#三-vue第三天" class="headerlink" title="三.vue第三天"></a>三.vue第三天</h3><h4 id="1-组件的定义与注册"><a href="#1-组件的定义与注册" class="headerlink" title="1.组件的定义与注册"></a>1.组件的定义与注册</h4><h6 id="1-定义"><a href="#1-定义" class="headerlink" title="(1).定义"></a>(1).定义</h6><p>组件即是标签</p><h6 id="2-组件注册"><a href="#2-组件注册" class="headerlink" title="(2)组件注册"></a>(2)组件注册</h6><p>①全局注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.component(<span class="hljs-string">&#x27;组件名&#x27;</span>,&#123; 配置选项 &#125;)<br></code></pre></td></tr></table></figure><p>②局部注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">componets:&#123;<br>   组件名<span class="hljs-number">1</span>:&#123; 配置选项 &#125;,<br>   组件名<span class="hljs-number">2</span>:&#123; 配置选项 &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>③注意点:</p><p>命名:</p><p>不能全部大写</p><p>驼峰命名需要变成中划线</p><p>尽量不要使用单标签</p><p>语义化</p><h6 id="3-组件的配置选项"><a href="#3-组件的配置选项" class="headerlink" title="(3)组件的配置选项"></a>(3)组件的配置选项</h6><p>①data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-keyword">return</span> &#123;  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只有data是一个函数且返回要给对象，每个组件的数据才会是相互独立的</p><p>②template</p><p>html字符串</p><p>选择匹配template的内容作为模板</p><p>模板只能有一个根标签</p><p>③其他和vue实例一模一样</p><h4 id="2组件通信"><a href="#2组件通信" class="headerlink" title="2组件通信"></a>2组件通信</h4><h6 id="1-父子通信"><a href="#1-父子通信" class="headerlink" title="(1)父子通信"></a>(1)父子通信</h6><p>①props使用</p><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">props:[<span class="hljs-string">&#x27;属性名1&#x27;</span>,<span class="hljs-string">&#x27;属性名2&#x27;</span>]<br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;组件 属性名<span class="hljs-number">1</span>=<span class="hljs-string">&quot;数据&quot;</span>  :属性名<span class="hljs-number">2</span>=<span class="hljs-string">&quot;变量&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">3、子组件  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">属性名1</span> &#125;&#125;</span><span class="xml">   </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">属性名2</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>②prors验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">props:&#123;<br>  属性名<span class="hljs-number">1</span>:<span class="hljs-built_in">String</span>,<br>  属性名<span class="hljs-number">2</span>:[<span class="hljs-built_in">String</span>,Numner,<span class="hljs-built_in">Boolean</span>],<br>  属性名<span class="hljs-number">3</span>:&#123;<br>     type:<span class="hljs-built_in">String</span>,<br>      type:[<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Number</span>],<br>      required:<span class="hljs-literal">true</span>/<span class="hljs-literal">false</span>,<br>      <span class="hljs-keyword">default</span>:<span class="hljs-string">&quot;默认值&quot;</span>,<br>      <span class="hljs-function"><span class="hljs-title">default</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">// 类型为引用数据类型</span><br>          <span class="hljs-keyword">return</span> 对象/数组<br>      &#125;，<br>     <span class="hljs-function"><span class="hljs-title">validate</span>(<span class="hljs-params">val</span>)</span>&#123; <span class="hljs-comment">// 自定义校验函数，true表示通过，false不通过</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>/<span class="hljs-literal">false</span>  <br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>③单项数据流</p><p>数据流自上而下！ 不允许修改props！ 【给props里面的属性赋值】</p><h6 id="2-子父通信"><a href="#2-子父通信" class="headerlink" title="(2)子父通信"></a>(2)子父通信</h6><p>自定义事件$emit</p><p>①子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$emit(<span class="hljs-string">&#x27;自定义事件&#x27;</span>,实参)<br></code></pre></td></tr></table></figure><p>②父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;组件 @自定义事件=<span class="hljs-string">&quot;父的事件函数&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>③</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">3</span>、父组件  <br>methods:&#123;<br>   父的事件函数(形参)&#123;<br>      ...<br>  &#125;    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>session与jwT认证</title>
    <link href="/2021/02/26/session%E4%B8%8EjwT%E8%AE%A4%E8%AF%81/"/>
    <url>/2021/02/26/session%E4%B8%8EjwT%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h3 id="session与jwT认证"><a href="#session与jwT认证" class="headerlink" title="session与jwT认证"></a>session与jwT认证</h3><h4 id="session认证-服务端渲染"><a href="#session认证-服务端渲染" class="headerlink" title="session认证(服务端渲染)"></a>session认证(服务端渲染)</h4><p>[需要与 cookie绑定关系]</p><h5 id="1-cookie"><a href="#1-cookie" class="headerlink" title="1.cookie"></a>1.cookie</h5><h6 id="cookie介绍"><a href="#cookie介绍" class="headerlink" title="cookie介绍"></a>cookie介绍</h6><p>用于存储在用户浏览器一段不超过4kb的字符串</p><h6 id="cookie作用"><a href="#cookie作用" class="headerlink" title="cookie作用"></a>cookie作用</h6><p>不同域名下的cookie信息是独立的,每当客户端发送请求时, 会自动把当前域名下所有未过期的 Cookie</p><p>  添加到请求头, 一同发送到服务器</p><h6 id="cookie特性"><a href="#cookie特性" class="headerlink" title="cookie特性:"></a>cookie特性:</h6><p>   (1) 自动发送</p><p>   (2) 域名独立</p><p>   (3) 过期时限</p><p>   (4) 4 KB限制</p><h6 id="cookie工作机制"><a href="#cookie工作机制" class="headerlink" title="cookie工作机制:"></a>cookie工作机制:</h6><p>客户端(浏览器)第一次发送请求到服务器, 服务器会以响应头的形式向浏览器写入 Cookie 保存, 之后浏览器</p><p> 每次发送请求到服务器都会自动将 Cookie 以请求头的形式发送过去</p><h6 id="cooki缺点"><a href="#cooki缺点" class="headerlink" title="cooki缺点:"></a>cooki缺点:</h6><p>信息容易被窃取和伪造</p><h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h6><p>使用 Session 方案, 用户的状态信息在服务器生成和存储, 浏览器只负责保留一个 sessionID 秘钥, 每次发送请求</p><p> 时携带这个 sessionID 到服务器, 服务器根据这个唯一的 id 值查询对应的用户信息进行返回</p><h5 id="2-session"><a href="#2-session" class="headerlink" title="2.session"></a>2.session</h5><h6 id="1-局限性"><a href="#1-局限性" class="headerlink" title="(1)局限性"></a>(1)局限性</h6><p>需要借助 cookie 手段存放在浏览器, 当涉及到前端跨域请求后端接口的时候, 需要做额外的配置,</p><p> 才能实现 Session 的认证</p><h6 id="2-缺点"><a href="#2-缺点" class="headerlink" title="(2).缺点"></a>(2).缺点</h6><p>当前端跨域请求后端接口时, 推荐使用 JWT 这种认证方式, 没有和 Cookie 的绑定关系</p><h4 id="jwt认证"><a href="#jwt认证" class="headerlink" title="jwt认证"></a>jwt认证</h4><h6 id="1-介绍"><a href="#1-介绍" class="headerlink" title="(1)介绍"></a>(1)介绍</h6><p> 用户信息通过加密签名后 token 字符串的形式, 保存在客户端浏览器中. 服务器通过解密客户端传来的 token 字符串来认证用户的身份</p><h6 id="2-组成部分"><a href="#2-组成部分" class="headerlink" title="(2)组成部分"></a>(2)组成部分</h6><p>  Header: 头部</p><p>  Payload: 有效荷载, 这里存放的是经过加密后的用户信息</p><p>  Signature: 签名</p><h6 id="3-使用方式"><a href="#3-使用方式" class="headerlink" title="(3).使用方式:"></a>(3).使用方式:</h6><p>安装jwt包(jsonwebtoken和express-jwt)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node.js">npm  i jsonwebtoken express-jwt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL语句使用</title>
    <link href="/2021/02/24/SQL%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/02/24/SQL%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h5 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h5><h6 id="一-查询数据"><a href="#一-查询数据" class="headerlink" title="一.查询数据"></a>一.查询数据</h6><p>1.从指定数据表中查询所有列的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><span class="hljs-keyword">from</span> 表名称<br></code></pre></td></tr></table></figure><p>2.从指定数据表中查询指定字段的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 列名称 <span class="hljs-keyword">from</span>表名称<br>查询多个时:<span class="hljs-keyword">select</span> 列名称<span class="hljs-number">1</span>,列名称<span class="hljs-number">2</span> form表名称<br></code></pre></td></tr></table></figure><h6 id="二-插入数据"><a href="#二-插入数据" class="headerlink" title="二.插入数据"></a>二.插入数据</h6><p>1.插入一条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名称 (列名称) <span class="hljs-keyword">values</span>(插入内容)<br></code></pre></td></tr></table></figure><p>2.插入多条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名称 (列名称<span class="hljs-number">1</span>,列名称<span class="hljs-number">2</span>) <span class="hljs-keyword">values</span>(插入内容<span class="hljs-number">1</span>,插入内容<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h6 id="三-修改参数"><a href="#三-修改参数" class="headerlink" title="三.修改参数"></a>三.修改参数</h6><p>1.修改单个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名称 <span class="hljs-keyword">set</span> 修改列<span class="hljs-operator">=</span>修改后的值 <span class="hljs-keyword">where</span> 列名称<span class="hljs-operator">=</span>值;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">例:修改username为xm的这条数据的密码,修改为abc520<br><span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;abc520&#x27;</span> <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xm&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>2.修改多个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名称 <span class="hljs-keyword">set</span> 修改列<span class="hljs-number">1</span><span class="hljs-operator">=</span>修改后的值,修改列<span class="hljs-number">2</span><span class="hljs-operator">=</span>修改后的值 <span class="hljs-keyword">where</span> 列名称<span class="hljs-operator">=</span>值<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">例:<br><span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123456&#x27;</span>,status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;wang&#x27;</span><br></code></pre></td></tr></table></figure><h6 id="四-删除参数"><a href="#四-删除参数" class="headerlink" title="四.删除参数"></a>四.删除参数</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名称 <span class="hljs-keyword">where</span> 列名称<span class="hljs-operator">=</span>值;<br></code></pre></td></tr></table></figure><h6 id="五-通过运算符查询参数"><a href="#五-通过运算符查询参数" class="headerlink" title="五.通过运算符查询参数"></a>五.通过运算符查询参数</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名称 <span class="hljs-keyword">where</span> 列名称 运算符 值<br></code></pre></td></tr></table></figure><p>常见运算符:</p><p>   (1) &gt; 和 &gt;= </p><p>   (2) &lt; 和 &lt;=</p><p>   (3) != 或 &lt;&gt;</p><p>   (4) =</p><p>   (5) between  </p><p>   (6)like(%)</p><p>   (7)or (或者)</p><p>​    (8)and(和)</p><h6 id="六-为数据表排序-order-by"><a href="#六-为数据表排序-order-by" class="headerlink" title="六.为数据表排序(order  by)"></a>六.为数据表排序(order  by)</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名称 <span class="hljs-keyword">order</span>  <span class="hljs-keyword">by</span> 列名称 [排序规则] <span class="hljs-keyword">asc</span>(升序)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名称 <span class="hljs-keyword">where</span> 列名称 [排序规则] <span class="hljs-keyword">order</span>  <span class="hljs-keyword">by</span> 列名称 [排序规则]<span class="hljs-keyword">desc</span> (降序)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>模块加载机制</title>
    <link href="/2021/02/22/%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/22/%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h5 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h5><h6 id="模块优先从缓存中进行加载"><a href="#模块优先从缓存中进行加载" class="headerlink" title="模块优先从缓存中进行加载"></a>模块优先从缓存中进行加载</h6><p>模块在第一次被加载后会被缓存，不论是内置核心模块、用户自定义模块还是第三方模块，</p><p>都有对应的缓存策略以提高加载效率</p><h6 id="1-内置模块加载机制"><a href="#1-内置模块加载机制" class="headerlink" title="1.内置模块加载机制"></a>1.内置模块加载机制</h6><p> require()总是会优先加载核心模块，即使有同名文件</p><h6 id="2-定义模块加载机制"><a href="#2-定义模块加载机制" class="headerlink" title="2.定义模块加载机制"></a>2.定义模块加载机制</h6><p>(1)必须以/，./或../开头，否则会被默认为是核心模块</p><p>(2)如果按确切的文件名没有找到，则Nodejs会尝试带上js、json或.node拓展名再加载</p><p>(3)目录加载顺序为:先寻找packagejson文件，并寻找main属性作为require的入口;若上述找不到，</p><p>Nodejs会试图加载目录下index.js或index.node文件</p><h6 id="3-第三方模块加载机制"><a href="#3-第三方模块加载机制" class="headerlink" title="3.第三方模块加载机制"></a>3.第三方模块加载机制</h6><p>如果传递给require()的模块标识符不是一个核心模块，也没有以、”或!”开头， 那么 Nodejs会从当前模块的父目录开始，尝试从它的/node_modules 目录里加载模块。如果还是没有找到，则移动到再上一层父目录，直到文件系统的根目录</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>npm命令</title>
    <link href="/2021/02/22/npm%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/22/npm%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h5 id="npm相关命令"><a href="#npm相关命令" class="headerlink" title="npm相关命令"></a>npm相关命令</h5><h6 id="下载包"><a href="#下载包" class="headerlink" title="(下载包)"></a>(下载包)</h6><p>npm i     包的具体名称 </p><h6 id="查看包"><a href="#查看包" class="headerlink" title="(查看包)"></a>(查看包)</h6><p>npm  view 包的具体名称</p><h6 id="下载指定版本的包"><a href="#下载指定版本的包" class="headerlink" title="(下载指定版本的包)"></a>(下载指定版本的包)</h6><p>npm  i 包的具体名称@版本号</p><h6 id="创建包管理配置文件"><a href="#创建包管理配置文件" class="headerlink" title="(创建包管理配置文件)"></a>(创建包管理配置文件)</h6><p>npm init -y</p><h6 id="卸载包"><a href="#卸载包" class="headerlink" title="(卸载包)"></a>(卸载包)</h6><p>npm uninstall 包名称</p><h6 id="安装开发测试阶段用到的包"><a href="#安装开发测试阶段用到的包" class="headerlink" title="(安装开发测试阶段用到的包)"></a>(安装开发测试阶段用到的包)</h6><p>npm i 包名称 -D</p><h5 id="使用nrm切换源"><a href="#使用nrm切换源" class="headerlink" title="使用nrm切换源"></a>使用nrm切换源</h5><p> 在任意目录下依次执行：<code>npm i -g nrm</code> ==&gt; <code>nrm ls</code> ==&gt;<code>nrm use taobao</code></p><h5 id="把-markdown-格式的文档转成-html-格式"><a href="#把-markdown-格式的文档转成-html-格式" class="headerlink" title="把 markdown 格式的文档转成 html 格式"></a>把 markdown 格式的文档转成 html 格式</h5><h6 id="安装全局包"><a href="#安装全局包" class="headerlink" title="安装全局包"></a>安装全局包</h6><p>npm i -g i5ting_toc</p><h6 id="使用全局命令"><a href="#使用全局命令" class="headerlink" title="使用全局命令"></a>使用全局命令</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node">i5ting_toc -f 要转换的md文件 index.html<br></code></pre></td></tr></table></figure><h6 id="发布自己的包"><a href="#发布自己的包" class="headerlink" title="发布自己的包"></a>发布自己的包</h6><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> publish<br></code></pre></td></tr></table></figure><h6 id="删除自己的包"><a href="#删除自己的包" class="headerlink" title="删除自己的包"></a>删除自己的包</h6><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> unpublish<br></code></pre></td></tr></table></figure><h5 id="安装-Express"><a href="#安装-Express" class="headerlink" title="安装 Express"></a>安装 Express</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> i express@<span class="hljs-number">4</span>.<span class="hljs-number">17</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js基础</title>
    <link href="/2021/02/09/js%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/02/09/js%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h1 id="js基础"><a href="#js基础" class="headerlink" title="js基础"></a>js基础</h1><h4 id="1-内置对象"><a href="#1-内置对象" class="headerlink" title="1.内置对象"></a>1.内置对象</h4><p>JS语言中为我们封装好了一系列内置的对象,快速帮助我们进行程序开发</p><ol><li><h5 id="Math-数学对象"><a href="#Math-数学对象" class="headerlink" title="Math 数学对象"></a>Math 数学对象</h5></li></ol><p>1.圆周率  Math.PI</p><p>2.求绝对值  Math.abs(nI)</p><p>3.求最大值  Mathmax(n1,n2,3)<br>向上取整 Math.ceil(nI)<br>1.Math数学对象 向下取整Math.floor(nl)</p><p>4.取整方法<br>四舍五入 Math.round(nI)</p><p>和parseInt()区别:有正负区分</p><p> Mathrandom()</p><p>5.随机数[0,1)<br>如何去产生一个a,b之间的随机整数?  a+parseInt(Mathrandom()(b-a+1))</p><h5 id="new-Date-时间对象"><a href="#new-Date-时间对象" class="headerlink" title="new Date()时间对象"></a>new Date()时间对象</h5><p>年份  getFullYear()</p><p>月份(0-11)  getMonth()</p><p>日数  getDate()</p><p>周(0-6)  getDay()</p><p>时  getHours()</p><p>分  getMinutes()</p><p>秒  getSeconds()</p><p>时间戳<br> date.getTime()</p><p> date.valueOf()</p><h5 id="ArrayisArray-val"><a href="#ArrayisArray-val" class="headerlink" title="ArrayisArray(val)"></a>ArrayisArray(val)</h5><p>判断数组的方法  a instanceof Array<br>返回值:布尔值</p><p>1数组的末尾追加元素  push(n,n2)<br>数组中新增元素</p><p>2数组的开头添加元素  unshift(n1,n2)</p><p>3.Array 数组对象 </p><p>1.数组的末尾删除一个元素 pop()</p><p>数组中删除元素<br>数组的开头删除一个元素  shift()</p><p>1从左向右查找数组中元素出现的第一个索引位置  indexOf(a)<br>数组中查找元素</p><p>2从后向前查找数组中元素出现的第一个索引位置  lastindexOf(a)<br>数组进行排序  arrsort(function(a,b)(return a-b))<br>数组进行翻转  arr.reverse()</p><h4 id="new的四步曲"><a href="#new的四步曲" class="headerlink" title="new的四步曲"></a>new的四步曲</h4><p>在内存堆中开辟一块内存空间用来存放我们将要创建的对象<br>把this指向这个内存空间<br> 3.通过this去添加属性和方法<br>添加完成之后自动返回this给调用者</p><h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><p>varobj={a1b2C:3)</p><p> for (var key in obj){  </p><p>console.log(key)</p><p> consoleog(obi[kev])</p><p> for-in遍历</p><h5 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h5><p>存储在栈当中存储的是值本身<br>复杂数据类型 存储在堆内存中存储的是地址值<br>特性:所有的变量函数名简单数据类型都存在栈当<br>数据的内存分配 中,堆当中只存储复杂数据类型值本身<br>简单数据类型传递的是值本身<br>函数传参时的区别<br>复杂数据类型传递的是地址值</p><h5 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h5><p>1.ECMAscript指定的标准语法 js的组成 </p><p>2.DOM(文档对象模型)</p><p>3.BOM(浏览器对象模型)浏览器又叫做接口，就是一个工具函数<br> api<br> WebAPI中的概念  webapi 跟浏览器还有网页元素相关的api<br>1.树根是:文档 document<br>.页面的标签:元素element<br> DOM树<br>3所有的内容节点node</p><p>以上所有的内容都是一个对象</p><h5 id="字符串内置对象"><a href="#字符串内置对象" class="headerlink" title="字符串内置对象"></a>字符串内置对象</h5><p>1.如何去获取一个字符串中指定位置的字符<br> str.charAt(3)</p><p>2如何获取字符串的长度  str.length<br> str.indexOf(要查找的字符，start)</p><p>3在字符串中查找某个字符的位置  str.lastindexOf(要查找的字符”)<br> -1表示不存在,没找到 &gt;=0<br> str.split(7)</p><p>4.字符串如何转成数组 例子:varstr=abcd’ ==&gt;[‘abc,d]<br> var arr = str.split(“)</p><p>slice(m,n)</p><p>substr(m,n)  n表示截取的位数</p><p>5字符串中如何去截取一段字符 3substring(m,n)</p><p>共同点:如果只传一个参数，表示从当前位置一直截取到最末尾</p><p>6.字符串中把小写字符转大写  toUpperCase()</p><p>7字符串中把大写字符转小写  toLowerCase()<br>字符串的不可变性,如果想要去修改字符串,只能重新<br>字符串的特性: 赋值</p><h5 id="数组内置对象"><a href="#数组内置对象" class="headerlink" title="数组内置对象"></a>数组内置对象</h5><p>1.数组中的截取</p><p> slice(m[.n])</p><p> 从m位置处开始截取,直到n位置结束(不包括结束<br>位置);如果只传递一个参数，表示从起始位置一直截取到最末尾</p><p> join(‘)</p><p>2.数组如何去连接成字符串 slice(m[.n])</p><p> toString() </p><p>默认使用逗号分隔<br>数组内置对象</p><p>3.数组如何与另一个数组进行拼接  arrl.concat(arr2)<br> splice(m, n)</p><p>4.数组中删除元素<br>从起始位置m处开始删除元素删除n个元素会在原数组的基础上进行修改</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js高级</title>
    <link href="/2021/02/09/js%E9%AB%98%E7%BA%A7/"/>
    <url>/2021/02/09/js%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h1 id="js高级"><a href="#js高级" class="headerlink" title="js高级"></a>js高级</h1><h4 id="一-第一天"><a href="#一-第一天" class="headerlink" title="一.第一天"></a>一.第一天</h4><h5 id="1-面向对象与面向过程"><a href="#1-面向对象与面向过程" class="headerlink" title="1.面向对象与面向过程"></a>1.面向对象与面向过程</h5><p>面向对象：易于维护、拓展，耦合性低；适用场景：多人合作的复杂项目<br>  面向过程：不易于维护、拓展，耦合性高；适用场景：简单的功能模块</p><h5 id="2-类和对象"><a href="#2-类和对象" class="headerlink" title="2.类和对象"></a>2.类和对象</h5><p>(1)类（构造函数）和对象的概念<br>  类 (泛指一类事物)：比如运动员，把公共的特征提取出来，封装在一个模板中（姓名，年龄，身高，特长…）<br>  对象（特指一个具体事物）：把类进行实例化，得到的具体的对象 </p><p>(2)面向对象的三个特性</p><pre><code>1. 封装性：把公共的特征提取出来，封装在一个模板中2. 继承性：类进行实例化，得到的具体的对象3. 多态性：生成多个对象</code></pre><h5 id="3-创建类和生成实例"><a href="#3-创建类和生成实例" class="headerlink" title="3.创建类和生成实例"></a>3.创建类和生成实例</h5><p>（1）定义类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>       <span class="hljs-comment">// 构造函数: 定义公共的属性</span><br>       <span class="hljs-title">constructor</span> (<span class="hljs-params">参数</span>) &#123; <br>         <span class="hljs-built_in">this</span>.属性名 = 属性值<br>       &#125;<br><br>       <span class="hljs-comment">// 类方法: 定义公共的行为</span><br>       方法名<span class="hljs-number">1</span> (参数) &#123;  &#125;<br>       方法名<span class="hljs-number">2</span> (参数) &#123;  &#125;<br>     &#125;<br></code></pre></td></tr></table></figure><p>（2）注意要点</p><ol><li><p>class 创建的类首字母还是要大写</p></li><li><p>类中的 constructor 构造函数, 接收 new 创建对象传递的参数，并返回实例对象（return this）</p></li><li><p>new 一个类时，自动调用构造函数方法，但不会自动调用类方法</p></li><li><p>类中的构造函数 和 类方法不需要加 function （重点）</p></li><li><p>多个类方法之间不需要使用逗号隔开 (重点)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>     <span class="hljs-comment">// 构造函数</span><br>     <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, age, height</span>)</span> &#123;<br>       <span class="hljs-built_in">this</span>.name = name<br>       <span class="hljs-built_in">this</span>.age = age<br>       <span class="hljs-built_in">this</span>.height = height<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-title">buy</span>(<span class="hljs-params">book</span>)</span> &#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;买了一本&#x27;</span> + book);<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-title">sing</span>(<span class="hljs-params">sing</span>)</span> &#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;会唱&#x27;</span> + sing);<br>     &#125;<br><br>   &#125;<br><br></code></pre></td></tr></table></figure></li></ol><p>（3）.类继承extends和super关键字</p><p>1.定义： class 子类名 extends 父类 {}</p><p>2.super 关键字可以访问和调用父类上的函数，包括构造函数和类方法</p><p>注意：</p><p>先从子类找，找不到在从父类 找</p><p>super作为函数可以调用父类的构造函数，作为对象，可以调用父类上的方法s</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">People</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, age, height</span>)</span> &#123;<br>       <span class="hljs-comment">// 在构造函数中要使用this，必须调用super（）函数</span><br>       <span class="hljs-built_in">super</span>(name, age, height)<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span> &#123;<br>       <span class="hljs-comment">// super第二个用法，直接调用父元素上的方法</span><br>       <span class="hljs-built_in">super</span>.sing()<br>     &#125;<br>   &#125;<br>   <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;哈子&#x27;</span>, <span class="hljs-number">13</span>, <span class="hljs-number">166</span>)<br>   <span class="hljs-keyword">var</span> xh = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">166</span>)<br>   <span class="hljs-built_in">console</span>.log(xm, xh);<br>   <span class="hljs-comment">// shiy类方法：对象.方法名（）</span><br>   xm.buy(<span class="hljs-string">&#x27;西游记&#x27;</span>)<br>   xh.buy(<span class="hljs-string">&#x27;红楼&#x27;</span>)<br>   xm.sing(<span class="hljs-string">&#x27;because you&#x27;</span>)<br>   xh.sing(<span class="hljs-string">&#x27;明天&#x27;</span>)<br>   <span class="hljs-keyword">var</span> xf = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小芳&#x27;</span>, <span class="hljs-number">13</span>, <span class="hljs-number">155</span>)<br>   <span class="hljs-built_in">console</span>.log(xf);<br>   xf.say()<br><br></code></pre></td></tr></table></figure><p>3.子类中注意的两点</p><p>子类中使用this之前，必须先调用super</p><p>子类可以扩展自己的方法和属性</p><h5 id="4-使用类的注意事项"><a href="#4-使用类的注意事项" class="headerlink" title="4.使用类的注意事项"></a>4.使用类的注意事项</h5><p>(1)声明class类不存在变量提升/函数提升,先定义在使用</p><p>(2)在类中访问属性和方法必须加this</p><h4 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h4><h5 id="1-构造函数创建对象"><a href="#1-构造函数创建对象" class="headerlink" title="1.构造函数创建对象"></a>1.构造函数创建对象</h5><p><code>js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用构造函数创建对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">name, age, sex</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>  <span class="hljs-built_in">this</span>.age = age<br>  <span class="hljs-built_in">this</span>.sex = sex<br>  <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sing&#x27;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(xm);<br><span class="hljs-comment">// 静态成员</span><br>People.gender = <span class="hljs-string">&#x27;man&#x27;</span><br><span class="hljs-built_in">console</span>.log(xm.gender);<span class="hljs-comment">//underfind</span><br><span class="hljs-built_in">console</span>.log(People.gender);<span class="hljs-comment">//gender添加到people上</span><br></code></pre></td></tr></table></figure><h5 id="2-静态成员和实例成员"><a href="#2-静态成员和实例成员" class="headerlink" title="2.静态成员和实例成员"></a>2.静态成员和实例成员</h5><p>（1）实例成员：只能通过实例对象才能访问的属性和方法</p><p>（2）静态成员：只能通过构造函数本身才能访问的属性和方法</p><h5 id="3-构造函数的原型"><a href="#3-构造函数的原型" class="headerlink" title="3.构造函数的原型"></a>3.构造函数的原型</h5><p>（1）构造函数的原型prototype</p><p>1.每一个函数都有一个prototype属性，它的值默认是一个对象</p><p>2.在prototype对象上的 属性和方法，会被new构造函数创建继承出来的实例对象</p><p>（2）注意</p><p> 1.只要是函数就默认有 prototype 属性, 但非函数的对象是不具有的</p><p> 2.定义构造函数时, 公共的方法定义在原型对象上, 这样可以被所有创建出来的实例直接继承</p><p><code>js</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>  <span class="hljs-built_in">this</span>.age = age<br>&#125;<br><span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">12</span>)<br><span class="hljs-keyword">var</span> xh = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-number">13</span>)<br>Student.prototype.abc = <span class="hljs-number">123</span><br><span class="hljs-comment">// 在构造函数的原型上添加方法</span><br>Student.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;<br>Student.prototype.sleep = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sleep&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(Student.prototype);<br><span class="hljs-comment">// 在prototype上添加的方法或属性会被所有实例对象继承</span><br><span class="hljs-built_in">console</span>.log(xm.abc);<br>xm.say()<br>xh.sleep()<br></code></pre></td></tr></table></figure><h5 id="4-对象原型proto"><a href="#4-对象原型proto" class="headerlink" title="4.对象原型proto"></a>4.对象原型<strong><strong>proto</strong></strong></h5><p>(1)对象的原型</p><p>每个对象都默认有一个 <strong>proto</strong> 的属性, 它的值是一个对象, 默认指向创建这个对象的构造函数的原型</p><p>(2)对象的访问特点</p><p>每个对象访问 <strong>proto</strong> 下的所有属性和方法，可以省略____proto___</p><p>(3)对象读取属性的顺序</p><p>先从自身的属性上进行查找，如果没有再去 <strong>proto</strong> 属性指向的对象上去查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.name = name<br>      <span class="hljs-built_in">this</span>.age = age<br>      <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你好&#x27;</span>);<br>      &#125;<br>    &#125;<br>    Student.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>    &#125;<br>    Student.prototype.sleep = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sleep&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">12</span>)<br>    <span class="hljs-keyword">var</span> xh = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-number">13</span>)<br>    <span class="hljs-comment">// 默认指向创建这个对象的构建函数的原型</span><br>    <span class="hljs-built_in">console</span>.log(xm.__proto__ === Student.prototype);<br>    <span class="hljs-built_in">console</span>.log(xm.__proto__);<br>    <span class="hljs-comment">// 完整的调用方法</span><br>    xm.__proto__.say() <br><br>    xm.say()<span class="hljs-comment">//.__proto__可以省略 </span><br>    <span class="hljs-comment">// 先从自身的属性上进行查找，如果没有再去 __proto__ 属性指向的对象上去查找</span><br></code></pre></td></tr></table></figure><h5 id="5-const构造对象"><a href="#5-const构造对象" class="headerlink" title="5.const构造对象"></a>5.const构造对象</h5><p> 每个构造函数的原型上，默认都有一个constructor属性，它指向构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Student.prototype.constructor === Student<br></code></pre></td></tr></table></figure><h5 id="6-原型链"><a href="#6-原型链" class="headerlink" title="6.原型链"></a>6.原型链</h5><p> 每个实例对象（ object ）都有一个私有属性（称之为__ <strong>proto__</strong> ）指向创建它的构造函数的原型对象（prototype ）。</p><p>  该原型对象也有一个自己的原型对象( <strong><strong><strong>proto</strong></strong></strong>) ，层层向上直到一个对象的原型对象为 null。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.name = name<br>     <span class="hljs-built_in">this</span>.age = age<br>     <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你好&#x27;</span>);<br>     &#125;<br>   &#125;<br>   Student.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>   &#125;<br>   Student.prototype.sleep = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sleep&#x27;</span>);<br>   &#125;<br>   <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">12</span>)<br>   <span class="hljs-keyword">var</span> xh = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-number">13</span>)<br>   <span class="hljs-built_in">console</span>.log(xm.__proto__ === Student.prototype);<br>   <span class="hljs-built_in">console</span>.log(Student.prototype);<span class="hljs-comment">//原型也是对象</span><br>   <span class="hljs-comment">// 每个实例对象（ object ）都有一个私有属性（称之为 __proto__ ）指向创建它的构造函数的原型对象（prototype ）。</span><br>   <span class="hljs-built_in">console</span>.log(Student.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype);<br>   <span class="hljs-comment">// 层层向上直到一个对象的原型对象为 null。</span><br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__);<span class="hljs-comment">//null</span><br></code></pre></td></tr></table></figure><h5 id="7-对象属性查找规则"><a href="#7-对象属性查找规则" class="headerlink" title="7.对象属性查找规则"></a>7.对象属性查找规则</h5><p>(1) 当访问一个对象的属性时，首先从这个对象自身进行查找</p><p>​    (2) 如果没有找到就从它的原型对象（__proto__）中查找</p><p>​    (3) 如果还没有找到，继续沿着对象的原型链层层向上查找，直到最末尾的 null</p><h5 id="8-call方法"><a href="#8-call方法" class="headerlink" title="8.call方法"></a>8.call方法</h5><p>（1）call方法可以修改函数调用时this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">a, b, c</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>     <span class="hljs-built_in">console</span>.log(a + b + c);<br>   &#125;<br>     <span class="hljs-comment">// call 方法的第一个参数就是用来改变函数调用时的 this 指向, 后面的参数才是正常调用函数传递的实参</span><br>   foo.call([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-comment">//[1, 2, 3]为this指向</span><br></code></pre></td></tr></table></figure><p>（2）父类构造函数继承属性：子类继承父类属性的核心: 使用 call() 把父类的实例对象 this 手动修改为子类的实例对象 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname,age</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//</span><br>  <span class="hljs-built_in">this</span>.uname=uname<br>  <span class="hljs-built_in">this</span>.age=age<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname,age,subject</span>)</span>&#123;<br>  Father.call(<span class="hljs-built_in">this</span>,uname,age)<br>  <span class="hljs-built_in">this</span>.subject=subject<br>&#125;<br><span class="hljs-keyword">var</span> xm=<span class="hljs-keyword">new</span> Son(<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-number">13</span>,<span class="hljs-string">&#x27;数学&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(xm);<br>    <br></code></pre></td></tr></table></figure><h5 id="9-利用原型对象-继承方法"><a href="#9-利用原型对象-继承方法" class="headerlink" title="9.利用原型对象 继承方法"></a>9.利用原型对象 继承方法</h5><p>核心:新建一个对象作为子类的原型对象,并把这个对象的原型指向父类的prototype</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">例:<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//</span><br>      <span class="hljs-built_in">this</span>.uname = uname<br>      <span class="hljs-built_in">this</span>.age = age<br>      <span class="hljs-built_in">this</span>.sleep = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;睡觉&#x27;</span>);<br>      &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname, age, subject</span>) </span>&#123;<br>      Father.call(<span class="hljs-built_in">this</span>, uname, age)<br>      <span class="hljs-built_in">this</span>.subject = subject<br>    &#125;<br> <span class="hljs-comment">// 1.直接把父构造函数的原型拿过来</span><br>    Son.prototype = Father.prototype<br>    <span class="hljs-comment">// 2新建一个内存空间</span><br>    <span class="hljs-keyword">var</span> obj = &#123;<br>      <span class="hljs-title">constructor</span>: <span class="hljs-title">Son</span>,<br>      <span class="hljs-title">__proto__</span>: <span class="hljs-title">Father</span>.<span class="hljs-title">prototype</span>,<br>    &#125;<br>    <span class="hljs-title">son</span>.<span class="hljs-title">prototype</span> = <span class="hljs-title">obj</span><br>    // 3.实例化构造函数<br>    <span class="hljs-title">Son</span>.<span class="hljs-title">prototype</span> = <span class="hljs-title">new</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)<br>    <span class="hljs-title">Son</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">constructor</span> = <span class="hljs-title">Son</span><br>    // 子构造函数原型上添加新方法<br>    <span class="hljs-title">Son</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">sleep</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sleep&#x27;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="10-类的本质"><a href="#10-类的本质" class="headerlink" title="10.类的本质"></a>10.类的本质</h5><p>1.构造函数默认有一个prototype属性,它的值是一个对象</p><p>2.构造函数prototype属性下有constructor和__proto__两个默认的属性</p><p>3.构造函数可以通过在prototype上添加方法,去实现所有实例继承</p><p>4.构造函数创建的实例上__proto__指向它构造函数的prototype</p><p>class 类的本质其实就是一个改造版的构造函数</p><h5 id="11-es5数组新增方法"><a href="#11-es5数组新增方法" class="headerlink" title="11.es5数组新增方法"></a>11.es5数组新增方法</h5><pre><code>1. forEach() 方法可以快速地遍历数组</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">例: 使用 forEach 对数组求和<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>    <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span><br>    arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;索引号&#x27;</span> + index + <span class="hljs-string">&#x27;-----&#x27;</span> + <span class="hljs-string">&#x27;数组元素&#x27;</span> + item);<br>      sum += item<br>    &#125;)<br>    <span class="hljs-built_in">console</span>.log(sum);<br></code></pre></td></tr></table></figure><p>2.filter() 方法从数组筛选出符合条件的一组元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 例子: 使用 filter 筛选数组中所有偶数</span><br>    <span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>]<br>    <span class="hljs-keyword">var</span> newArr = arr2.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> item % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br>    &#125;)<br>    <span class="hljs-built_in">console</span>.log(newArr);<br><br></code></pre></td></tr></table></figure><h4 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h4><h5 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1.正则表达式"></a>1.正则表达式</h5><p>（1）用于匹配字符串中字符组合的模式，在数据类型中是属于对象</p><p>（2）作用</p><p>通常用来校验、查找、替换指定规则的字符文本</p><p>（3）特点：</p><p>灵活性、逻辑性、和功能性强</p><p>简单高效</p><p>可读性稍差，不利于记忆</p><h5 id="2-正则表达式的使用"><a href="#2-正则表达式的使用" class="headerlink" title="2.正则表达式的使用"></a>2.正则表达式的使用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.1 构造函数方式 RegExp，创建正则表达式 </span><br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/abc/</span>)<br>    <span class="hljs-built_in">console</span>.log(reg);<br>    <span class="hljs-comment">// 1.2 字面量方式创建正则表达式 /表达式/</span><br>    <span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/abc/</span><br>    <span class="hljs-built_in">console</span>.log(reg2);<br>    <span class="hljs-comment">// 1.3 正则表达式的 test 方法，检测字符串是否符合正则表达式定义的规则，返回 true 或 false</span><br>    <span class="hljs-comment">// 语法： reg.test(str)</span><br><br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abcdef&#x27;</span>));<br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;defd&#x27;</span>));<br><br>    <span class="hljs-comment">// 使用正则表达式判断字符串中是否包含 123 字符</span><br>    <span class="hljs-keyword">var</span> reg3=<span class="hljs-regexp">/123/</span><br>    <span class="hljs-built_in">console</span>.log(reg3);<br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;123456&#x27;</span>));<br></code></pre></td></tr></table></figure><h5 id="3-边界符"><a href="#3-边界符" class="headerlink" title="3.边界符"></a>3.边界符</h5><p> (1) ^: 用来匹配以…开头</p><p>  (2) $: 用来匹配以…结尾</p><p>注意事项：</p><p>(1) 不使用 ^ 和 $ 表示只要字符串中包含匹配的内容就返回 true, 可以多出其他任意字符</p><p> (2) ^ 和 $ 在一起配合使用，表示是精确匹配, 不能多出其他字符也不能少 (必须满足数量和类型都一致)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">例:<br><span class="hljs-keyword">var</span> reg=<span class="hljs-regexp">/abc/</span><br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abcde&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abdec&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-keyword">var</span> reg2=<span class="hljs-regexp">/^abc/</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;abcdef&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;defabc&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;abdfc&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-keyword">var</span> reg3=<span class="hljs-regexp">/abc$/</span><br>    <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;abcdef&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;defabc&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-comment">//字符数量和类型都必须符合 </span><br>    <span class="hljs-keyword">var</span> reg4=<span class="hljs-regexp">/^abc$/</span><br>    <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;abcde&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//true</span><br><br></code></pre></td></tr></table></figure><h5 id="4-字符类"><a href="#4-字符类" class="headerlink" title="4.字符类"></a>4.字符类</h5><p> 1、字符集合 如：[xyz] </p><p>​      表示匹配字符集合中的任意字符，中括号中只要有任意一个字符出现在字符串就满足规则</p><p> 2、中括号中的特殊字符自动转义用破折号（-）来指定一个字符范围，如：[c-f1-3A-D]</p><p>注意:</p><p> 于点（.）和星号（*）这样的特殊符号中括号中自动转义为原本的意义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"> 例:<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[abc]123/</span><br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;a123&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;x123&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^[abc]123$/</span><br>    <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;ab123&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abc123&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;a123&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-comment">// 用破折号（-）来指定一个字符范围</span><br>    <span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/^[a-f1-3A-D]$/</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;ab&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;AD&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;D&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;2&#x27;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>3.反向字符集合 </p><p>表示匹配没有包含在字符集合的字符,字符串中只要有一个不再中括号内的字符就满足规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"> 例:<br><span class="hljs-keyword">var</span> reg=<span class="hljs-regexp">/[^a-f]/</span><br>     <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;hello&#x27;</span>));<span class="hljs-comment">//true</span><br>     <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//false</span><br>     <span class="hljs-keyword">var</span> reg2=<span class="hljs-regexp">/^[^a-f]$/</span><br>     <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;hello&#x27;</span>));<span class="hljs-comment">//false</span><br>     <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//false</span><br>     <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;g&#x27;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h5 id="5-量词符"><a href="#5-量词符" class="headerlink" title="5.量词符"></a>5.量词符</h5><p>用来制定某个字符出现次数的特殊符号/ab*c/</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js">例:<br><span class="hljs-comment">// 1. * 表示前面的字符出现 0 次或多次, 即可有可无</span><br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^ab*c$/</span><br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abbc&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;ac&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;aac&#x27;</span>));<span class="hljs-comment">//false</span><br><br>    <span class="hljs-comment">// 2. + 表示前面的字符至少出现 1 次或多次, 即至少出现一次</span><br>    <span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^ab+c$/</span><br>    <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abbc&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;ac&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;aac&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;..................................&#x27;</span>);<br>    <span class="hljs-comment">// 3. ? 表示前面的字符出现 0 次或 1 次, 要么不出现, 要么只出现 1 次</span><br>    <span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/^[0-9a-f]?$/</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;123&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;A&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;&#x27;</span>));<span class="hljs-comment">//true</span><br><br><br>    <span class="hljs-comment">// 4. &#123;3&#125; 表示前面的字符只能出现 3 次</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;................................&#x27;</span>);<br>    <span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/^[0-9a-f]&#123;3&#125;$/</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;123&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;A&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-comment">// 5. &#123;3,&#125; 表示前面的字符出现 3 次 或 3次以上</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;..........................&#x27;</span>);<br>    <span class="hljs-keyword">var</span> reg3 = <span class="hljs-regexp">/^[0-9a-f]&#123;3,&#125;$/</span><br>    <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;abcdef&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;123&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;A&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-comment">// 6. &#123;3,5&#125; 表示前面的字符出现 3 次 到 5 次以内</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;..........................&#x27;</span>);<br>    <span class="hljs-keyword">var</span> reg4 = <span class="hljs-regexp">/^[0-9a-f]&#123;3,5&#125;$/</span><br>    <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;abcdef&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;123ab&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;123&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;A&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;&#x27;</span>));<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h5 id="6-括号总结"><a href="#6-括号总结" class="headerlink" title="6.括号总结"></a>6.括号总结</h5><p> 中括号 [xyz] 字符集合：匹配方括号中的任意字符</p><p> 大括号 {3,8} 量词符：表示重复的次数</p><p> 小括号 (xyz): 表示一个整体</p><h5 id="7-预定义类"><a href="#7-预定义类" class="headerlink" title="7.预定义类:"></a>7.预定义类:</h5><p> \d：匹配 0~9 之间的任意一个数字，等价于 [0-9]</p><p>  \D: 匹配所有 0~9 之外的字符，等价于 [^0-9]</p><p>  \w: 匹配任意的字母、数字和下划线，等价于 [a-zA-Z0-9_]</p><p>  \W: 匹配任意的字母、数字和下划线之外的字符，等价于 [^0-9a-zA-Z_]</p><p>  \s: 匹配所有的空格（包括换行符，制表符，空格符等），等价于 [\t\r\n\v\f]</p><p>  \S：匹配所有的非空格符，等价于 [^\t\r\n\v\f].</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js">例:<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3,&#125;$/</span><br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;123456&#x27;</span>));<span class="hljs-comment">//ture</span><br>    <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;123abc&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;....................&#x27;</span>);<br>    <span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^\D?$/</span><br>    <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;ABCabc&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;........................&#x27;</span>);<br>    <span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/^\w+$/</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;abc123&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;abc123,.&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;...............................&#x27;</span>);<br>    <span class="hljs-keyword">var</span> reg3 = <span class="hljs-regexp">/^\Wabc$/</span><br>    <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;123abc&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;Aabc&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;@abc&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;...................&#x27;</span>);<br>    <span class="hljs-keyword">var</span> reg4 = <span class="hljs-regexp">/^abc\s+def$/</span><br>    <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;abcdef&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;abc    def&#x27;</span>));<span class="hljs-comment">//ture</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;.........................&#x27;</span>);<br>    <span class="hljs-keyword">var</span> reg5 = <span class="hljs-regexp">/^[0-9]?\S*$/</span><br>    <span class="hljs-built_in">console</span>.log(reg5.test(<span class="hljs-string">&#x27;abcdef&#x27;</span>));<span class="hljs-comment">//ture</span><br>    <span class="hljs-built_in">console</span>.log(reg5.test(<span class="hljs-string">&#x27;  abcdef&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg5.test(<span class="hljs-string">&#x27;123abc&#x27;</span>));<span class="hljs-comment">//ture</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;.............................&#x27;</span>);<br>    <span class="hljs-comment">// 139* 手机电话号码</span><br>    <span class="hljs-keyword">var</span> reg6 = <span class="hljs-regexp">/^1[3-9]\d&#123;9&#125;$/</span><br>    <span class="hljs-built_in">console</span>.log(reg6.test(<span class="hljs-string">&#x27;19910133161&#x27;</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;...................&#x27;</span>);<br>    <span class="hljs-comment">// 正则中符号 | 表示 或者的关系 </span><br>    <span class="hljs-keyword">var</span> reg7 = <span class="hljs-regexp">/^(123|abc|hello)$/</span><br>    <span class="hljs-built_in">console</span>.log(reg7.test(<span class="hljs-string">&#x27;1234&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.log(reg7.test(<span class="hljs-string">&#x27;hello&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg7.test(<span class="hljs-string">&#x27;123abc&#x27;</span>));<span class="hljs-comment">//false</span><br><br>    <span class="hljs-comment">// 座机号码验证：010-12345678 或 0530-1234567</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;..............................&#x27;</span>);<br>    <span class="hljs-keyword">var</span> reg8 = <span class="hljs-regexp">/^(\d&#123;3&#125;-\d&#123;8&#125;||\d&#123;4&#125;-\d&#123;7&#125;)$/</span><br>    <span class="hljs-built_in">console</span>.log(reg8.test(<span class="hljs-string">&#x27;010-12345678&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg8.test(<span class="hljs-string">&#x27;0530-1234567&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(reg8.test(<span class="hljs-string">&#x27;05303-1234567&#x27;</span>));<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h5 id="8-正则表达式查找和替换"><a href="#8-正则表达式查找和替换" class="headerlink" title="8.正则表达式查找和替换"></a>8.正则表达式查找和替换</h5><p> 1、字符串中的替换</p><p>​      replace(reg, 替换后的字符) 可以替换字符串中的字符，参数可以是普通字符串，也可以是正则表达式</p><p>  2、正则表达式参数 /表达式/参数</p><p>​      指定匹配的模式：</p><p>​    （1）/表达式/g   全局匹配</p><p>​    （2）/表达式/i   忽略大小写进行匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> 例:<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abC123abC678abc345c&#x27;</span><br>    <span class="hljs-comment">// 把所有的 c 替换成 a</span><br>    <span class="hljs-keyword">var</span> str = str.replace(<span class="hljs-regexp">/c/gi</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(str);<br><br>    <span class="hljs-comment">// match 方法可以配合正则表达式, 从字符串中找出所有匹配正则的字符</span><br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d&#123;3&#125;/g</span><br>    <span class="hljs-keyword">var</span> res = str.match(reg)<br>    <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><h4 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h4><p>es6</p><h5 id="1-let关键字声明变量"><a href="#1-let关键字声明变量" class="headerlink" title="1.let关键字声明变量"></a><strong>1</strong>.let关键字声明变量</h5><p>（1）let作用：用来声明有一个块级作用域的变量，使用方法和var一样</p><p>（2）let定义变量特点：</p><p>​    （1）只在声明时的块或子块中可用</p><p>​           (2)不存在变量提升</p><p>​           (3)存在暂存死区</p><p>​            (4)同一作用域下不能重复声明同一变量</p><p>​            (5)声明的变量不会挂载在 window 对象上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 只在声明时的块或子块中可用</span><br>    &#123;<br>      <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;张三&#x27;</span><br>      &#123;<br>        <span class="hljs-built_in">console</span>.log(name);<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// console.log(name);//报错</span><br><br>    <span class="hljs-comment">// 1.1 if 判断语句 中使用 let</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">let</span> sge = <span class="hljs-number">23</span><br>    &#125;<br>    <span class="hljs-comment">//console.log(sge);报错</span><br>    <span class="hljs-comment">// 1.2 for 循环中使用 let</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0</span>; i++) &#123;<br>      <span class="hljs-built_in">console</span>.log(i);<br>    &#125;<br>    <span class="hljs-comment">// console.log(i);//报错</span><br>    <span class="hljs-comment">// 2. 不存在变量提升，只能先声明再使用</span><br>    <span class="hljs-comment">// console.log(foo);报错</span><br>    <span class="hljs-keyword">let</span> foo = <span class="hljs-string">&#x27;hello&#x27;</span><br><br>    <span class="hljs-comment">// 3. 存在“暂存死区” ==&gt; 存在但是无法访问到 (目的: 要求变量必须先声明再使用)</span><br>    <span class="hljs-keyword">var</span> bar = <span class="hljs-number">20</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-comment">// console.log(bar);报错</span><br>      <span class="hljs-keyword">let</span> bar = <span class="hljs-number">10</span><br>    &#125;<br>    <span class="hljs-comment">// 4. 声明的变量不会挂载在 window 对象上</span><br>    <span class="hljs-keyword">let</span> fox = <span class="hljs-number">10</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.fox);<span class="hljs-comment">//underfind</span><br>    <span class="hljs-comment">// 5. 同一作用域下不能重复声明同一变量</span><br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span><br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><h5 id="2-const关键字声明常量"><a href="#2-const关键字声明常量" class="headerlink" title="2.const关键字声明常量"></a>2.const关键字声明常量</h5><p>（1）作用：用来声明一个有块级作用域的常量</p><p>（2）特点：</p><ol><li>  声明常量时必须要初始化值</li><li>  同样具有块级作用域和“暂存死区”</li><li>  赋值为简单数据类型时，不能直接修改值</li><li>  赋值为复杂数据类型时，可以修改对象内部的属性和方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  1. 声明常量时必须要初始化值</span><br>    <span class="hljs-keyword">const</span> age<span class="hljs-comment">//不赋值会报错</span><br>    <span class="hljs-comment">//  3. const 常量赋值为简单数据类型时，不能直接修改值</span><br>    <span class="hljs-keyword">const</span> age = <span class="hljs-number">1</span><br>    age = <span class="hljs-number">3</span><span class="hljs-comment">//会报错，const不能修改值</span><br>    <span class="hljs-comment">//  4. const 常量赋值为复杂数据类型时，可以修改对象内部的属性和方法</span><br>    <span class="hljs-keyword">const</span> date = &#123;<br>      a: <span class="hljs-number">1</span>,<br>      b: <span class="hljs-number">1</span><br>    &#125;<br>    date.a = <span class="hljs-number">10</span><span class="hljs-comment">//通过</span><br>    date = []<span class="hljs-comment">//报错，date地址值发生改变</span><br><br>    <span class="hljs-comment">//  2. 同样具有块级作用域和 “暂存死区”</span><br>    <span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#x27;hello&#x27;</span><br>    &#123;<br>      <span class="hljs-built_in">console</span>.log(foo);<span class="hljs-comment">//报错</span><br>      <span class="hljs-keyword">const</span> foo = <span class="hljs-string">&#x27;123&#x27;</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>（3）注意：const常量不能重新赋值一个对象，因为地址值发生了改变</p><h5 id="3-let-const-var区别"><a href="#3-let-const-var区别" class="headerlink" title="3.let,const,var区别"></a>3.let,const,var区别</h5><p>// 变量的使用建议：</p><p>​    // （1） 优先使用 const 关键字声明固定不变的量</p><p>​    // （2） 使用 let 关键字声明变化的量</p><p>​    // （3） 兼容性考虑 或 基于 jQuery 的项目使用 var; 基于 vue 的项目 let/const</p><h5 id="4-数组解构赋值"><a href="#4-数组解构赋值" class="headerlink" title="4.数组解构赋值"></a>4.数组解构赋值</h5><p>(1)对数组解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> [a, b, c, d, e] = arr<br><span class="hljs-built_in">console</span>.log(a, b, c, d, e);<br></code></pre></td></tr></table></figure><p>(2)没有解构成功的,值为undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr2=[<span class="hljs-number">4</span>]<br><span class="hljs-keyword">let</span>[foo,bar]=arr2<br><span class="hljs-built_in">console</span>.log(foo,bar);<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>(3)不需要解构的元素可以使用逗号隔开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span>[,a1,b1]=arr<br><span class="hljs-built_in">console</span>.log(a1,b1);<span class="hljs-comment">//2,3</span><br></code></pre></td></tr></table></figure><p>(4)两个变量交换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> num1=<span class="hljs-number">10</span><br><span class="hljs-keyword">let</span> num2=<span class="hljs-number">20</span>;<br>[num1,mun2]=[num2,num1]<br><span class="hljs-built_in">console</span>.log(num1,num2);<br></code></pre></td></tr></table></figure><h5 id="5-对象解构赋值"><a href="#5-对象解构赋值" class="headerlink" title="5.对象解构赋值"></a>5.对象解构赋值</h5><p>(一)注意:</p><p>(1) 没有解构成功的变量，值为 undefined</p><p> (2) 变量的名称和属性名一一对应</p><p> (3) 变量名的顺序和数量没有要求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从对象中解构出 name 和 height 的属性值</span><br><span class="hljs-keyword">let</span> obj = &#123;<br>      name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>      age: <span class="hljs-number">18</span>,<br>      height: <span class="hljs-string">&#x27;175cm&#x27;</span>,<br>      weight: <span class="hljs-string">&#x27;65kg&#x27;</span><br>    &#125;<br> <span class="hljs-keyword">let</span> &#123; height, name &#125; = obj<br>    <span class="hljs-built_in">console</span>.log(name, height);<br><span class="hljs-comment">// 没有解构成功的变量，值为 undefined</span><br><span class="hljs-keyword">let</span>&#123;name,height,foo&#125;<br> <span class="hljs-built_in">console</span>.log(foo);<span class="hljs-comment">//undefined</span><br> <span class="hljs-comment">// 变量名的顺序和数量没有要求</span><br> <span class="hljs-keyword">let</span> &#123; weight &#125; = obj<br>    <span class="hljs-built_in">console</span>.log( weight );<br></code></pre></td></tr></table></figure><p>(二)对象赋值解构别名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 如何给解构后的变量起个别名 : 变量名</span><br>    <span class="hljs-keyword">let</span> obj = &#123;<br>      name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>      age: <span class="hljs-number">18</span>,<br>      height: <span class="hljs-string">&#x27;175cm&#x27;</span>,<br>      weight: <span class="hljs-string">&#x27;65kg&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">// 这里冒号左边name只用来进行属性名的匹配，冒号右边才是正真赋值的对象</span><br>    <span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">name</span>: name2, height &#125; = obj<br>    <span class="hljs-built_in">console</span>.log(name2);<br>........................................................<br><span class="hljs-keyword">let</span> data = &#123;<br>      name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>      age: <span class="hljs-number">18</span>,<br>      height: <span class="hljs-string">&#x27;175cm&#x27;</span>,<br>      weight: <span class="hljs-string">&#x27;65kg&#x27;</span>,<br>      goods: &#123;<br>        id: <span class="hljs-number">3</span>,<br>        name: <span class="hljs-string">&#x27;洗衣机&#x27;</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 从data中解析出goods对象的name值</span><br>    <span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">goods</span>: &#123; name, id &#125; &#125; = data<br>    <span class="hljs-built_in">console</span>.log(name);<br><br></code></pre></td></tr></table></figure><h5 id="6-箭头函数☆☆☆"><a href="#6-箭头函数☆☆☆" class="headerlink" title="6.箭头函数☆☆☆"></a>6.箭头函数☆☆☆</h5><p>(1)表达式:()=&gt;{}</p><p>(2)特点:</p><ol><li><p>一般不会单独使用, 可以当做匿名函数进行赋值 \ 传参 \ 返回值</p></li><li><p>如果函数体只有一行代码，并代码执行结果就是返回值, 可以同时省略大括号和 return</p></li><li><p>如果形参只有一个, 可以省略小括号</p></li><li><p>内部没有 arguments 这个内置对象</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义一个箭头函数</span><br><span class="hljs-keyword">const</span> arr=<span class="hljs-function">()=&gt;</span>&#123;&#125;<br><span class="hljs-comment">//计算两个数和</span><br><span class="hljs-keyword">const</span> arr1=<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a+b<br><span class="hljs-built_in">console</span>.log(arr1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br>函数体只有一行代码, 结果就是返回值时, 可以直接省略大括号 <br><span class="hljs-comment">// 使用箭头函数遍历数组</span><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr1.foreach(item,index)=&gt;<span class="hljs-built_in">console</span>.log(item)<br> 如果形参只有一个, 可以省略小括号<br><span class="hljs-comment">// 筛选出数组中所有的偶数</span><br><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">var</span> newArr=arr3.filter(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>  <span class="hljs-keyword">return</span> item%<span class="hljs-number">2</span>==<span class="hljs-number">0</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(newArr)<br></code></pre></td></tr></table></figure><p>(3) 箭头函数没有自己的 this, 它里面的 this 指向箭头函数所处位置的 this(★★★)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">例:<br><span class="hljs-keyword">const</span> obj = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<span class="hljs-comment">//object</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<span class="hljs-comment">//object</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> resFn = fn.call(obj)<br>    resFn()<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">例:<br><span class="hljs-keyword">const</span> obj = &#123;<br>      age: <span class="hljs-number">20</span>,<br>      say: <span class="hljs-function">() =&gt;</span> &#123;<br>        alert(<span class="hljs-built_in">this</span>.age)<span class="hljs-comment">//undefined</span><br>       &#125;<br>     &#125;<br>     obj.say()<br>     <span class="hljs-built_in">console</span>.log(obj.foo)<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>(4)this情况讨论 ★★ ☆</p><ol><li>非函数中的 this 指向 window</li><li> es5 中函数的 this 指向函数的调用者</li><li>call, apply, bind 这三种手动改变 this 的情况特殊对待, this 指向传递的第一个参数</li><li>es6 中的箭头函数没有自己的 this, 指向所处位置的 this</li></ol><h5 id="7-剩余参数"><a href="#7-剩余参数" class="headerlink" title="7.剩余参数"></a>7.剩余参数</h5><p>(1)剩余参数语法(…变量名):将剩下的参数表示为一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, ...rest</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//1</span><br>      <span class="hljs-built_in">console</span>.log(rest);<span class="hljs-comment">//[2,3,4,5]</span><br>    &#125;<br>    fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>(2)计算多个数的和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getSum = <span class="hljs-function">(<span class="hljs-params">...rest</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(rest);<span class="hljs-comment">//[1,2,3,4,5]</span><br>      <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>      rest.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> sum += item)<br>      <span class="hljs-built_in">console</span>.log(sum);<span class="hljs-comment">//15</span><br>    &#125;<br>    getSum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>(3)剩余参数配合解构赋值</p><p>剩余参数使用在解构赋值中, 表示数组中剩余的所有元素 ，或者对象中剩余的所有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;black&#x27;</span>]<br>    <span class="hljs-keyword">const</span> obj = &#123;<br>      name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>      age: <span class="hljs-number">12</span>,<br>      height: <span class="hljs-string">&#x27;170cm&#x27;</span>,<br>      weight: <span class="hljs-string">&#x27;135kg&#x27;</span>,<br>    &#125;<br>  <span class="hljs-number">1.</span> 把数组中剩下的元素组成新的数组<br>  <span class="hljs-keyword">let</span> [foo, bar, ...rest1] = arr<br>    <span class="hljs-built_in">console</span>.log(foo, bar);<br>    <span class="hljs-built_in">console</span>.log(rest1);<br>  <span class="hljs-number">2.</span> 把对象剩下的属性组成一个新对象<br>    <span class="hljs-keyword">let</span> &#123; age, ...rest2 &#125; = obj<br>    <span class="hljs-built_in">console</span>.log(age);<br>    <span class="hljs-built_in">console</span>.log(rest2);<br> <span class="hljs-number">3.</span> 使用剩余参数快速实现浅拷贝<br>    <span class="hljs-keyword">const</span> &#123; ...obj2 &#125; = obj<br>    <span class="hljs-built_in">console</span>.log(obj2);<br></code></pre></td></tr></table></figure><h5 id="8-拓展运算符"><a href="#8-拓展运算符" class="headerlink" title="8.拓展运算符"></a>8.拓展运算符</h5><p>(1)拓展运算符（展开语法 或 spred运算符） …对象名 或 …数组名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">50</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">foo</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(foo);<span class="hljs-comment">//打印第一个参数3</span><br>    &#125;<br>    fn(...arr1)<br>    <span class="hljs-built_in">console</span>.log(...arr1);<br></code></pre></td></tr></table></figure><p>(2) 使用拓展运算符也可以快速完成浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> res=[...arr1]<br>    <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><p>(3)拓展运算符的应用</p><ol><li><p>用来合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>    <span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>    <span class="hljs-comment">// (1).concat方法</span><br>    <span class="hljs-keyword">const</span> res = arr1.concat(arr2)<br>    <span class="hljs-built_in">console</span>.log(res);<br>    <span class="hljs-comment">// push方法</span><br>    <span class="hljs-comment">// arr1.push(...arr2)</span><br>    <span class="hljs-comment">// console.log(arr1);</span><br><span class="hljs-number">3.</span><br>    <span class="hljs-built_in">console</span>.log([...arr1, ...arr2]);<br></code></pre></td></tr></table></figure></li><li><p>求数组中的最大值</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr3 = [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br>   <span class="hljs-keyword">const</span> res2 = <span class="hljs-built_in">Math</span>.max(...arr3)<br>   <span class="hljs-built_in">console</span>.log(res2);<br>  <br></code></pre></td></tr></table></figure><p>3.对象拓展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>     name: <span class="hljs-string">&#x27;andy&#x27;</span>,<br>     age: <span class="hljs-number">12</span>,<br>     color: <span class="hljs-string">&#x27;red&#x27;</span><br>   &#125;<br>   <span class="hljs-keyword">const</span> obj2 = &#123;<br>     id: <span class="hljs-number">2</span>,<br>     height: <span class="hljs-number">178</span><br>   &#125;<br>    <span class="hljs-built_in">console</span>.log(&#123; ...obj &#125;);<span class="hljs-comment">//浅拷贝</span><br><span class="hljs-built_in">console</span>.log(&#123; ...obj, ...obj2 &#125;);<span class="hljs-comment">//合并对象</span><br><br></code></pre></td></tr></table></figure><p>4.字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str=<span class="hljs-string">&#x27;helloword&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(...str);<br></code></pre></td></tr></table></figure><p>(4)使用拓展运算符拓展字符串和伪数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 1. 使用拓展运算符拓展字符串和伪数组</span></span><br><span class="javascript">   <span class="hljs-keyword">const</span> spans=<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;span&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(...spans);</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [...spans]</span><br>    arr.push(123)<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr);</span><br><span class="javascript">    arr.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(item);</span><br>    &#125;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="9-模板字符串"><a href="#9-模板字符串" class="headerlink" title="9.模板字符串"></a>9.模板字符串</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模板字符串 (强大的字符串变量拼接语法)</span><br>   <span class="hljs-keyword">let</span> str = <span class="hljs-string">`hello world`</span><br>   <span class="hljs-built_in">console</span>.log(str);<br></code></pre></td></tr></table></figure><p>(1)使用反引号（``）代替单双引号，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;andy&#x27;</span><br>    <span class="hljs-keyword">let</span> age = <span class="hljs-number">10</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`我的名字叫<span class="hljs-subst">$&#123;name&#125;</span>,我今年<span class="hljs-subst">$&#123;age&#125;</span>岁了`</span>);<br><span class="hljs-comment">// 使用 $&#123;变量名或表达式&#125; 代替原来的 &#x27;引引加加&#x27;</span><br></code></pre></td></tr></table></figure><p>(2)模板字符串支持换行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> obj = &#123;<br>      name: <span class="hljs-string">&#x27;tome&#x27;</span>,<br>      age: <span class="hljs-number">17</span>,<br>      height: <span class="hljs-number">178</span>,<br>      color: <span class="hljs-string">&#x27;blue&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> str2 = <span class="hljs-string">`</span><br><span class="hljs-string">&lt;tr&gt;</span><br><span class="hljs-string">  &lt;td&gt;<span class="hljs-subst">$&#123;obj.name&#125;</span>&lt;/td&gt;</span><br><span class="hljs-string">  &lt;td&gt;<span class="hljs-subst">$&#123;obj.age&#125;</span>&lt;/td&gt;</span><br><span class="hljs-string">  &lt;td&gt;<span class="hljs-subst">$&#123;obj.height&#125;</span>&lt;/td&gt;</span><br><span class="hljs-string">&lt;/tr&gt;</span><br><span class="hljs-string">`</span><br> <span class="hljs-keyword">const</span> table = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;table&#x27;</span>)<br>    table.innerHTML = str2<br></code></pre></td></tr></table></figure><p>(3)在模板字符串中可以放任意的表达式 (如三元表达式, 函数调用, 逻辑运算符, +-*/…)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">fn = <span class="hljs-function">() =&gt;</span> abc<br>    <span class="hljs-keyword">let</span> str3 = <span class="hljs-string">`hello<span class="hljs-subst">$&#123;<span class="hljs-literal">true</span> ? <span class="hljs-string">&#x27;abc&#x27;</span> : <span class="hljs-string">&#x27;bcd&#x27;</span>&#125;</span>`</span><br>    <span class="hljs-built_in">console</span>.log(str3);<br></code></pre></td></tr></table></figure><ol start="10"><li><h5 id="Array-from应用"><a href="#Array-from应用" class="headerlink" title="Array.from应用"></a>Array.from应用</h5><p>(1)Array.from(param[, fn]) 把其他类型的数据转化为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>      <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>      <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>      length: <span class="hljs-number">2</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> arr = <span class="hljs-built_in">Array</span>.from(obj)<br>    <span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><p>(2)第二个可选参数 fn 用于对转化后的数组进行遍历修改</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr2 = <span class="hljs-built_in">Array</span>.from(obj, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(item);<br>      <span class="hljs-keyword">return</span> item + <span class="hljs-string">&#x27;1&#x27;</span><br>    &#125;)<br>    <span class="hljs-built_in">console</span>.log(arr2);<span class="hljs-comment">//[&#x27;a1&#x27;,&#x27;b1&#x27;]</span><br></code></pre></td></tr></table></figure><h5 id="10-find方法与findindex方法"><a href="#10-find方法与findindex方法" class="headerlink" title="10.find方法与findindex方法"></a>10.find方法与findindex方法</h5><p>(1)find 方法用于查找数组中符合条件的第一个元素，</p><p>​     返回值: 找到就返回这个元素, 没有找到则返回 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">44</span>]<br><br> <span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-number">12</span>));<span class="hljs-comment">//1,返回的是元素值</span><br> <span class="hljs-comment">// 找出大于 10 的第一个元素</span><br>    <span class="hljs-keyword">const</span> res = arr.find(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><p>(2) findIndex() 方法用于查找数组中符合条件的第一个元素的索引，</p><p>返回值: 找到就返回当前元素的所以, 没有找到始终返回 -1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>]<br><br>    <span class="hljs-comment">// 找元素中大于 10 的元素索引</span><br>    <span class="hljs-keyword">const</span> res = arr.findIndex(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><h5 id="11-includes与map方法"><a href="#11-includes与map方法" class="headerlink" title="11.includes与map方法"></a>11.includes与map方法</h5><p>（1）includes() 方法判断数组是否包含给定的值</p><p>​     返回值: 如果包含则返回 true，否则返回 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>]<br><br>    <span class="hljs-comment">// 判断数组中是否包含 44 这个元素</span><br>    <span class="hljs-built_in">console</span>.log(arr.includes(<span class="hljs-number">44</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-number">8</span>) !== -<span class="hljs-number">1</span>);<span class="hljs-comment">//ture</span><br></code></pre></td></tr></table></figure><p>注意：和其他查找方法的区别 ==&gt;  includes 只能接受一个固定值，不能接受一个函数</p><p>（2） map() 方法基于原数组去创建一个新数组</p><p>​     返回值: 新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br><span class="hljs-keyword">const</span> res = arr2.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span>item/<span class="hljs-number">2</span>)<span class="hljs-comment">//[1,2,3,4,5]</span><br>    <span class="hljs-built_in">console</span>.log(res);<br>    <span class="hljs-built_in">console</span>.log(arr2);<br></code></pre></td></tr></table></figure><h5 id="12-startsWith与-endsWith-repeat方法"><a href="#12-startsWith与-endsWith-repeat方法" class="headerlink" title="12.startsWith与 endsWith~repeat方法"></a>12.startsWith与 endsWith~repeat方法</h5><p>（1）startsWith() 方法：判断字符串是否以某些字符开头，返回 Boolean</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello wrold&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(str.startsWith(<span class="hljs-string">&#x27;hello&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-keyword">const</span> res = <span class="hljs-regexp">/^hello/</span><br>    <span class="hljs-built_in">console</span>.log(res.test(str));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>（2）endsWith() 方法：判断字符串是否以某些字符结尾，返回 Boolean</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(str.endsWith(<span class="hljs-string">&#x27;old&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-keyword">const</span> res2 = <span class="hljs-regexp">/old$/</span><br>    <span class="hljs-built_in">console</span>.log(res2.test(str));<span class="hljs-comment">//true</span><br><br></code></pre></td></tr></table></figure><p>(3) repeat(n) 方法：用于将某个字符串重复 n 次, 返回重复后的新字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;123&#x27;</span><br>str = str.repeat(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">console</span>.log(str);<br></code></pre></td></tr></table></figure><h5 id="13-set数据结构"><a href="#13-set数据结构" class="headerlink" title="13.set数据结构"></a>13.set数据结构</h5><p> es6 中提供了新的数据结构 Set, 它类似于数组，但所有的元素都是唯一的，没有重复值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个 set 类型的数据 ===&gt; new Set(数组)</span><br>    <span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>])<br>    <span class="hljs-built_in">console</span>.log(mySet);<span class="hljs-comment">//出现重复的自动去重</span><br>    <span class="hljs-built_in">console</span>.log(mySet.size);<br></code></pre></td></tr></table></figure><h5 id="14-利用set去★"><a href="#14-利用set去★" class="headerlink" title="14.利用set去★"></a>14.利用set去★</h5><p>(1)向 set 结构中添加数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>()<br>    set.add(<span class="hljs-number">1</span>)<br>    set.add(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">console</span>.log(set);<br></code></pre></td></tr></table></figure><p>(2) 把 set 类型的数据转成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>    <span class="hljs-keyword">const</span> arr = [...mySet]<br>    <span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><p>(3)利用 set 数据类型的不重复性进行数组去重</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">const</span> arr<span class="hljs-number">2</span> =<span class="hljs-meta"> [1, 2, 3, 4, 5, 6, 3, 4, 5]</span><br>    <span class="hljs-attribute">const</span> set<span class="hljs-number">2</span> = new Set(arr<span class="hljs-number">2</span>)<br>    <span class="hljs-attribute">console</span>.log([...set<span class="hljs-number">2</span>]);<br></code></pre></td></tr></table></figure><p>(4)总结: 数组去重的方法★★★</p><p> 1.建立一个新数组遍历原数组,indexof去判断元素是否存在</p><p>  2.filter( )</p><p>  3.原生for循环进行双重遍历,splice(i,1)</p><ol start="4"><li>[…newSet(arr)]</li></ol><h5 id="15-set操作"><a href="#15-set操作" class="headerlink" title="15.set操作"></a>15.set操作</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br><br>    <span class="hljs-comment">// 1. 向 set 中添加元素 add()</span><br>    mySet.add(<span class="hljs-number">8</span>)<br>    <span class="hljs-comment">// 2. 从 set 中删除元素 delete()</span><br>    mySet.delete(<span class="hljs-number">2</span>)<br>    <span class="hljs-comment">// 3. 从 set 中查找元素 has()</span><br>    <span class="hljs-built_in">console</span>.log(mySet.has(<span class="hljs-number">6</span>));<br>    <span class="hljs-built_in">console</span>.log(mySet);<br>    <span class="hljs-comment">// 4. 清空所有元素 clear()</span><br>     mySet.clear()<br>    <span class="hljs-built_in">console</span>.log(mySet);<br></code></pre></td></tr></table></figure><h5 id="16-set遍历"><a href="#16-set遍历" class="headerlink" title="16.set遍历"></a>16.set遍历</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 遍历 set 类型的数据</span><br>    <span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br><br>    <span class="hljs-comment">// 1. forEach() 方法遍历 set 数据中的每个元素</span><br>    mySet.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(item))<br>    <span class="hljs-comment">// 2. for...of 方法遍历任何可迭代的数据( Set, 数组, Map, 字符串)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> mySet) &#123;<br>      <span class="hljs-built_in">console</span>.log(item);<br>    &#125;<br>    <span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr2) &#123;<br>      <span class="hljs-built_in">console</span>.log(item);<br>      <span class="hljs-keyword">if</span> (item == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">break</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 遍历字符串</span><br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello&#x27;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> str) &#123;<br>      <span class="hljs-built_in">console</span>.log(item);<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;...................&#x27;</span>);<br>    <span class="hljs-comment">// 注意: 对象不支持 for..of 方法</span><br><br>    <span class="hljs-keyword">const</span> obj = &#123;<br>      a: <span class="hljs-number">1</span>,<br>      b: <span class="hljs-number">2</span>,<br>      c: <span class="hljs-number">3</span><br>    &#125;<br>    <span class="hljs-comment">// 遍历对象</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(obj)) &#123;<br>      <span class="hljs-built_in">console</span>.log(item);<br>      <span class="hljs-built_in">console</span>.log(obj[item]);<br>    &#125;<br><br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ajax</title>
    <link href="/2021/02/09/ajax/"/>
    <url>/2021/02/09/ajax/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><h4 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h4><h5 id="一-客户端与服务器"><a href="#一-客户端与服务器" class="headerlink" title="(一).客户端与服务器"></a>(一).客户端与服务器</h5><h6 id="1-服务器"><a href="#1-服务器" class="headerlink" title="1.服务器"></a>1.服务器</h6><p>负责存放数据的电脑</p><h6 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h6><p>负责获取和消费数据的电脑</p><h5 id="（二）URL地址"><a href="#（二）URL地址" class="headerlink" title="（二）URL地址"></a>（二）URL地址</h5><h6 id="１-介绍"><a href="#１-介绍" class="headerlink" title="１. 介绍"></a>１. 介绍</h6><p>互联网资源的统一定位标识符, 用来标识互联网上每个资源的存放位置</p><h6 id="２-组成部分："><a href="#２-组成部分：" class="headerlink" title="２.组成部分："></a>２.组成部分：</h6><p> url路径的获取:location.path</p><p>url中的查询参数:location.search</p><p> url中的锚点:location.hash</p><h5 id="（三）GET-POST与Ajax"><a href="#（三）GET-POST与Ajax" class="headerlink" title="（三）GET .POST与Ajax"></a>（三）GET .POST与Ajax</h5><ol><li><p>$.get()  用于发送 GET 请求，获取数据：</p><p>$.get（ｕｒｌ，［ｄａｔａ］，[callback]）</p></li><li><p>$.post() 用于发送 POST 请求，提交数据</p><p>$.post(url, [data], [callback])</p></li><li><p>$.ajax({ }) 用于发送任意 HTTP 请求，可以获取和提交数据</p><p>$.ajax({</p></li></ol><p>​    url: 请求地址,</p><p>​    method: 请求方式,</p><p>​    data: 请求参数,</p><p>​    success: function (res) { // 请求成功的回调函数 }</p><p>   })</p><h4 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h4><h5 id="１-form表单："><a href="#１-form表单：" class="headerlink" title="１.form表单："></a>１.form表单：</h5><p>表单标签　　文本域　　　提交按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 文本域 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uname&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 提交按钮 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="２-form表单相关属性"><a href="#２-form表单相关属性" class="headerlink" title="２.form表单相关属性"></a>２.form表单相关属性</h5><p>１.action：ｕｒｌ地址</p><p>２.target：｛＿seft在当前标签页打开｝｛＿blank在新的标签页打开｝</p><p>３.method：提交方式｛get与post｝</p><p>４.enctype：（１）application／x-www－form－urlencoded　表示在发送前编码所以内容（２）multiparty／form－data　二进制编码（３）text／plain</p><h5 id="３表单提交方式与Ajax提交"><a href="#３表单提交方式与Ajax提交" class="headerlink" title="３表单提交方式与Ajax提交"></a>３表单提交方式与Ajax提交</h5><h6 id="表单提交："><a href="#表单提交：" class="headerlink" title="表单提交："></a>表单提交：</h6><p>同步提交</p><p>缺点：</p><p>（１）页面会刷新</p><p>（２）页面之前的数据全丢失</p><h6 id="Ajax提交："><a href="#Ajax提交：" class="headerlink" title="Ajax提交："></a>Ajax提交：</h6><p>只负责采集数据，不会刷新页面</p><h5 id="４-Ajax提交表单数据"><a href="#４-Ajax提交表单数据" class="headerlink" title="４.Ajax提交表单数据"></a>４.Ajax提交表单数据</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 表单标签 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;./index.html&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 文本域 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 提交按钮 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">方法一：<br>$(<span class="hljs-string">&#x27;#btn&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>      <span class="hljs-comment">//阻止事件默认行为</span><br>      <span class="hljs-comment">//   e.preventDefault()</span><br>      <span class="hljs-comment">//   console.log(123);</span><br>      <span class="hljs-comment">// &#125;)</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">方法二：<br> $(<span class="hljs-string">&#x27;form&#x27;</span>).submit(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>        e.preventDefault()<br>        <span class="hljs-built_in">console</span>.log($(<span class="hljs-built_in">this</span>).serialize());<br>        $.ajax(&#123;<br>          url: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,<br>          method: <span class="hljs-string">&#x27;post&#x27;</span>,<br>          data: $(<span class="hljs-built_in">this</span>).serialize(),<br>          success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(res);<br>          &#125;<br>          <br>        &#125;)<br>      &#125;)<br></code></pre></td></tr></table></figure><p>serialize（）获取表单数据</p><h5 id="５-模板引擎应用"><a href="#５-模板引擎应用" class="headerlink" title="５.模板引擎应用"></a>５.模板引擎应用</h5><p>输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;&#123;value&#125;&#125;<br>&#123;&#123;data.key&#125;&#125;<br>&#123;&#123;data[<span class="hljs-string">&#x27;key&#x27;</span>]&#125;&#125;<br>&#123;&#123;a ? b : c&#125;&#125;<br>&#123;&#123;a || b&#125;&#125;<br>&#123;&#123;a + b&#125;&#125;<br></code></pre></td></tr></table></figure><p>条件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;&#123;<span class="hljs-keyword">if</span> value&#125;&#125; ... &#123;&#123;/<span class="hljs-keyword">if</span>&#125;&#125;<br>&#123;&#123;<span class="hljs-keyword">if</span> v1&#125;&#125; ... &#123;&#123;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> v2&#125;&#125; ... &#123;&#123;/<span class="hljs-keyword">if</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;&#123;each target&#125;&#125;<br>    &#123;&#123;$index&#125;&#125; &#123;&#123;$value&#125;&#125;<br>&#123;&#123;/each&#125;&#125;<br></code></pre></td></tr></table></figure><p>过滤器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">template.defaults.imports.dateFormat = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">date, format</span>)</span>&#123;<span class="hljs-comment">/*[code..]*/</span>&#125;;<br>template.defaults.imports.timestamp = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<span class="hljs-keyword">return</span> value * <span class="hljs-number">1000</span>&#125;;<br></code></pre></td></tr></table></figure><h5 id="６．正则表达式方法"><a href="#６．正则表达式方法" class="headerlink" title="６．正则表达式方法"></a>６．正则表达式方法</h5><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a(\d+)b/</span><br><span class="hljs-keyword">var</span> res = reg.exec(<span class="hljs-string">&#x27;asc781na234bio&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(res);<span class="hljs-comment">//只能找到符合条件的第一个字符内容</span><br></code></pre></td></tr></table></figure><p>模板引擎原理:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&lt;li&gt;&#123;&#123;  uname  &#125;&#125;----&#123;&#123;age&#125;&#125;----&lt;/li&gt;&#x27;</span><br>    <span class="hljs-keyword">var</span> obj = &#123;<br>      uname: <span class="hljs-string">&#x27;toy&#x27;</span>,<br>      age: <span class="hljs-number">11</span><br>    &#125;<br>    str = str.replace(<span class="hljs-regexp">/&#123;&#123;\s*(\w+)\s*&#125;&#125;/g</span>, <span class="hljs-function">(<span class="hljs-params">item1, item2</span>) =&gt;</span> obj[item2])<br>    <span class="hljs-built_in">console</span>.log(str);<br></code></pre></td></tr></table></figure><h5 id="7-简单的模板引擎"><a href="#7-简单的模板引擎" class="headerlink" title="7.简单的模板引擎"></a>7.简单的模板引擎</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/html&quot;</span> id=<span class="hljs-string">&quot;tpl&quot;</span>&gt;<br>    &lt;div&gt;<br>&lt;span&gt;&#123;&#123;uname&#125;&#125;&lt;/span&gt;<br>&lt;span&gt;&#123;&#123;age&#125;&#125;&lt;/span&gt;<br>&lt;span&gt;&#123;&#123;sex&#125;&#125;&lt;/span&gt;<br><br>    &lt;/div&gt;<br>  &lt;/script&gt;<br>  &lt;script&gt;<br>    <span class="hljs-keyword">var</span> data = &#123;<br>      uname: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>      age: <span class="hljs-number">12</span>,<br>      sex: <span class="hljs-string">&#x27;男&#x27;</span><br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myTemp</span>(<span class="hljs-params">id, obj</span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> str = $(<span class="hljs-string">&#x27;#&#x27;</span> + id).html()<br>      <span class="hljs-keyword">return</span> str.replace(<span class="hljs-regexp">/&#123;&#123;\s*(\w+)\s*&#125;&#125;/g</span>, <span class="hljs-function">(<span class="hljs-params">item1, item2</span>) =&gt;</span> obj[item2])<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(myTemp(<span class="hljs-string">&#x27;tpl&#x27;</span>, data));<br>    $(<span class="hljs-string">&#x27;body&#x27;</span>).append(myTemp(<span class="hljs-string">&#x27;tpl&#x27;</span>, data))<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="8-时间插件"><a href="#8-时间插件" class="headerlink" title="8.时间插件"></a>8.时间插件</h5><ul><li><p><input disabled="" type="checkbox"> </p><pre><code class="js">//引入插件&lt;script src=&quot;./lib/moment.js&quot;&gt;&lt;/script&gt; &lt;script&gt;        var res = moment().format(&#39;YYYY-MM-DD HH:mm:ss&#39;)        console.log(res);    &lt;/script&gt;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>#### 第三天<br><br>##### <span class="hljs-number">1</span>.XMLHttpRequest介绍<br><br>### 什么是`JSON`<br><br>**概念：**`JSON` 的英文全称是 `JavaScript Object Notation`，即“**JavaScript 对象表示法**”。简单来讲，<br><br>`JSON` 就是 `Javascript` 对象和数组的字符串表示法，它使用文本表示一个 `JS` 对象或数组的信息，因此，<br><br>**`JSON` 的本质是字符串**。<br><br>**作用：**`JSON` 是一种轻量级的文本数据交换格式，在作用上类似于 `XML`，专门用于存储和传输数据，但<br><br>是 `JSON` 比 `XML` 更小、更快、更易解析。<br><br>**现状：**`JSON` 是在 <span class="hljs-number">2001</span> 年开始被推广和使用的数据格式，到现今为止，`JSON` 已经成为了主流的数据交<br><br>换格式<br><br>### `JSON`的两种结构<br><br>`JSON` 就是用字符串来表示 `Javascript` 的对象和数组。所以，`JSON` 中包含**对象**和**数组**两种结构，通过这<br><br>两种结构的相互嵌套，可以表示各种复杂的数据结构。<br><br>#### **对象结构**<br><br><span class="hljs-title">对象结构在 `JSON` 中表示为 `&#123; &#125;` 括起来的内容。数据结构为 `&#123; key: value, key:</span> value, … &#125;` 的键<br><br>值对结构。其中，`key` 必须是使用英文的双引号包裹的字符串，`value` 的数据类型可以是**数字、字符串、**<br><br>**布尔值、null、数组、对象**<span class="hljs-number">6</span>种类型。<br><br><span class="hljs-title">![](D:</span>/就业班资料/ajks/Ajax资料/day3/<span class="hljs-number">02</span>.笔记/images/json对象格式.png)<br><br>#### **数组结构**<br><br>数组结构在 `JSON` 中表示为 `[ ]` 括起来的内容。数据结构为 `[ <span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;javascript&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-literal">true</span> … ]` 。<br><br>数组中数据的类型可以是**数字、字符串、布尔值、null、数组、对象**<span class="hljs-number">6</span>种类型。<br><br><span class="hljs-title">![](D:</span>/就业班资料/ajks/Ajax资料/day3/<span class="hljs-number">02</span>.笔记/images/json数组结构.png)<br><br>###  `JSON`语法注意事项<br><br>① 属性名必须使用双引号包裹<br><br>② 字符串类型的值必须使用双引号包裹<br><br>③ `JSON` 中不允许使用单引号表示字符串<br><br>④ `JSON` 中不能写注释<br><br>⑤ `JSON` 的最外层必须是对象或数组格式<br><br>⑥ 不能使用 `undefined` 或函数作为 `JSON` 的值<br><br>**`JSON` 的作用：**在计算机与网络之间存储和传输数据。<br><br>**`JSON` 的本质：**用字符串来表示 `Javascript` 对象数据或数组数据<br><br>### `JSON`和`JS`对象的关系<br><br>`JSON` 是 `JS` 对象的字符串表示法，它使用文本表示一个 `JS` 对象的信息，本质是一个字符串。例如：<br><br><span class="hljs-title">![](D:</span>/就业班资料/ajks/Ajax资料/day3/<span class="hljs-number">02</span>.笔记/images/JSON与对象关系.png)<br><br>### `JSON`和`JS`对象的互转<br><br>要实现从 `JSON` 字符串转换为 `JS` 对象，使用 `JSON.parse()` 方法：<br><br><span class="hljs-title">![](D:</span>/就业班资料/ajks/Ajax资料/day3/<span class="hljs-number">02</span>.笔记/images/JSON转js对象.png)<br><br>要实现从 `JS` 对象转换为 `JSON` 字符串，使用 `JSON.stringify()` 方法：<br><br><span class="hljs-title">![](D:</span>/就业班资料/ajks/Ajax资料/day3/<span class="hljs-number">02</span>.笔记/images/JS对象转JSON.png)<br><br>**应用场景**<br><br>```javascript<br>var xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br><span class="hljs-title">xhr.open(&#x27;GET&#x27;, &#x27;http://www.liulongbin.top:</span><span class="hljs-number">3006</span>/api/getbooks&#x27;)<br>xhr.send()<br>xhr.onreadystatechange = function () &#123;<br>  if (xhr.readyState === <span class="hljs-number">4</span> &amp;&amp; xhr.status === <span class="hljs-number">200</span>) &#123;<br>    console.log(xhr.responseText)<br>    console.log(typeof xhr.responseText)<br>    var result = JSON.parse(xhr.responseText)<br>    console.log(result)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>### 序列化和反序列化</code></pre></li></ul><p>把<strong>数据对象</strong> <strong>转换为</strong> <strong>字符串</strong>的过程，叫做<strong>序列化</strong>，例如：调用 <code>JSON.stringify()</code> 函数的操作，叫做 <code>JSON</code> 序列化。</p><p>把<strong>字符串</strong> <strong>转换为</strong> <strong>数据对象</strong>的过程，叫做<strong>反序列化</strong>，例如：调用 <code>JSON.parse()</code> 函数的操作，叫做 <code>JSON</code> 反序列化。</p><h4 id="封装自己的Ajax函数"><a href="#封装自己的Ajax函数" class="headerlink" title="封装自己的Ajax函数"></a>封装自己的Ajax函数</h4><h5 id="要实现的效果"><a href="#要实现的效果" class="headerlink" title="要实现的效果"></a>要实现的效果</h5><p><img src="D:/就业班资料/ajks/Ajax资料/day3/02.笔记/images/封装自己的Ajax.png"></p><h5 id="定义options参数选项"><a href="#定义options参数选项" class="headerlink" title="定义options参数选项"></a>定义options参数选项</h5><p><code>itheima()</code> 函数是我们自定义的 <code>Ajax</code> 函数，它接收一个配置对象作为参数，配置对象中可以配置如下属性：</p><ul><li><p><code>method</code> 请求的类型</p></li><li><p><code>url</code> 请求的 <code>URL</code> 地址</p></li><li><p><code>data</code> 请求携带的数据</p></li><li><p><code>success</code> 请求成功之后的回调函数</p></li></ul><h5 id="处理data参数"><a href="#处理data参数" class="headerlink" title="处理data参数"></a>处理data参数</h5><p>需要把 <code>data</code> 对象，转化成查询字符串的格式，从而提交给服务器，因此提前定义 <code>resolveData</code> 函数如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*** 处理 data 参数</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param <span class="hljs-type">&#123;data&#125;</span> </span>需要发送到服务器的数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@returns <span class="hljs-type">&#123;string&#125;</span> </span>返回拼接好的查询字符串 name=zs&amp;age=10</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolveData</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> data) &#123;<br>    <span class="hljs-keyword">var</span> str = k + <span class="hljs-string">&#x27;=&#x27;</span> + data[k]<br>    arr.push(str)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> arr.join(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="定义itheima函数"><a href="#定义itheima函数" class="headerlink" title="定义itheima函数"></a>定义<code>itheima</code>函数</h5><p>在 <code>itheima()</code> 函数中，需要创建 <code>xhr</code> 对象，并监听 <code>onreadystatechange</code> 事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">itheima</span>(<span class="hljs-params">options</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br><br>  <span class="hljs-comment">// 把外界传递过来的参数对象，转换为 查询字符串</span><br>  <span class="hljs-keyword">var</span> qs = resolveData(options.data)<br>  <span class="hljs-comment">// 注册监听</span><br>  xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 注册监听</span><br>    <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span> &amp;&amp; xhr.status === <span class="hljs-number">200</span>) &#123;<br>      <span class="hljs-comment">// 把服务器的json字符串转成js对象</span><br>      <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText)<br>      options.success(result)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="判断请求的类型"><a href="#判断请求的类型" class="headerlink" title="判断请求的类型"></a>判断请求的类型</h5><p>不同的请求类型，对应 <code>xhr</code> 对象的不同操作，因此需要对请求类型进行 <code>if … else …</code> 的判断：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (options.method.toUpperCase() === <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>  <span class="hljs-comment">// 发起GET请求</span><br>  xhr.open(options.method, options.url + <span class="hljs-string">&#x27;?&#x27;</span> + qs)<br>  xhr.send()<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options.method.toUpperCase() === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>  <span class="hljs-comment">// 发起POST请求</span><br>  xhr.open(options.method, options.url)<br>  xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>)<br>  xhr.send(qs)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XMLHttpRequest-Level2的新特性"><a href="#XMLHttpRequest-Level2的新特性" class="headerlink" title="XMLHttpRequest Level2的新特性"></a><code>XMLHttpRequest Level2</code>的新特性</h4><h5 id="旧版XMLHttpRequest的缺点"><a href="#旧版XMLHttpRequest的缺点" class="headerlink" title="旧版XMLHttpRequest的缺点"></a>旧版<code>XMLHttpRequest</code>的缺点</h5><ul><li><p>只支持文本数据的传输，无法用来读取和上传文件</p></li><li><p>传送和接收数据时，没有进度信息，只能提示有没有完成</p></li></ul><h5 id="XMLHttpRequest-Level2的新功能"><a href="#XMLHttpRequest-Level2的新功能" class="headerlink" title="XMLHttpRequest Level2的新功能"></a><code>XMLHttpRequest Level2</code>的新功能</h5><ul><li><p>可以设置 HTTP 请求的时限</p></li><li><p>可以使用 <code>FormData</code> 对象管理表单数据</p></li><li><p>可以上传文件</p></li><li><p>可以获得数据传输的进度信息</p></li></ul><h5 id="设置HTTP请求时限"><a href="#设置HTTP请求时限" class="headerlink" title="设置HTTP请求时限"></a>设置<code>HTTP</code>请求时限</h5><p>有时，<code>Ajax</code> 操作很耗时，而且无法预知要花多少时间。如果网速很慢，用户可能要等很久。新版本的 <code>XMLHttpRequest</code> 对象，增加了 <code>timeout</code> 属性，可以设置 <code>HTTP</code> 请求的时限：</p><p><img src="D:/就业班资料/ajks/Ajax资料/day3/02.笔记/images/超时时间.png"></p><p>上面的语句，将最长等待时间设为 3000 毫秒。过了这个时限，就自动停止HTTP请求。与之配套的还有一个</p><p><code>timeout</code> 事件，用来指定回调函数：</p><p><img src="D:/就业班资料/ajks/Ajax资料/day3/02.笔记/images/超时回调.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br>  <span class="hljs-comment">// 设置 超时时间</span><br>  xhr.timeout = <span class="hljs-number">30</span><br>  <span class="hljs-comment">// 设置超时以后的处理函数</span><br>  xhr.ontimeout = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;请求超时了！&#x27;</span>)<br>  &#125;<br>  xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>)<br>  xhr.send()<br>  xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span> &amp;&amp; xhr.status === <span class="hljs-number">200</span>) &#123;<br>      <span class="hljs-built_in">console</span>.log(xhr.responseText)<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="FormData对象管理表单数据"><a href="#FormData对象管理表单数据" class="headerlink" title="FormData对象管理表单数据"></a><code>FormData</code>对象管理表单数据</h5><p>Ajax 操作往往用来提交表单数据。为了方便表单处理，<code>HTML5</code> 新增了一个 <code>FormData</code> 对象，可以模拟表单操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 新建 FormData 对象</span><br><span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> FormData()<br><span class="hljs-comment">// 2. 为 FormData 添加表单项</span><br>fd.append(<span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-string">&#x27;zs&#x27;</span>)<br>fd.append(<span class="hljs-string">&#x27;upwd&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>)<br><span class="hljs-comment">// 3. 创建 XHR 对象</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br><span class="hljs-comment">// 4. 指定请求类型与URL地址</span><br>xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>)<br><span class="hljs-comment">// 5. 直接提交 FormData 对象，这与提交网页表单的效果，完全一样</span><br>xhr.send(fd)<br></code></pre></td></tr></table></figure><h5 id="FormData对象管理表单数据-1"><a href="#FormData对象管理表单数据-1" class="headerlink" title="FormData对象管理表单数据"></a><code>FormData</code>对象管理表单数据</h5><p><code>FormData</code>对象也可以用来获取网页表单的值，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取表单元素</span><br><span class="hljs-keyword">var</span> form = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#form1&#x27;</span>)<br><span class="hljs-comment">// 监听表单元素的 submit 事件</span><br>form.addEventListener(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br> e.preventDefault()<br> <span class="hljs-comment">// 根据 form 表单创建 FormData 对象，会自动将表单数据填充到 FormData 对象中</span><br> <span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> FormData(form)<br> <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br> xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>)<br> xhr.send(fd)<br> xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h5><p>新版 <code>XMLHttpRequest</code> 对象，不仅可以发送文本信息，还可以上传文件。</p><p><strong>实现步骤：</strong></p><p>① 定义 <code>UI</code> 结构</p><p>② 验证是否选择了文件</p><p>③ 向 <code>FormData</code> 中追加文件</p><p>④ 使用 <code>xhr</code> 发起上传文件的请求</p><p>⑤ 监听 <code>onreadystatechange</code> 事件</p><h5 id="定义UI结构"><a href="#定义UI结构" class="headerlink" title="定义UI结构"></a>定义<code>UI</code>结构</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 1. 文件选择框 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file1&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 2. 上传按钮 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnUpload&quot;</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 3. 显示上传到服务器上的图片 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="验证是否选择了文件"><a href="#验证是否选择了文件" class="headerlink" title="验证是否选择了文件"></a>验证是否选择了文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 获取上传文件的按钮</span><br><span class="hljs-keyword">var</span> btnUpload = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#btnUpload&#x27;</span>)<br><span class="hljs-comment">// 2. 为按钮添加 click 事件监听</span><br>btnUpload.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-comment">// 3. 获取到选择的文件列表</span><br> <span class="hljs-keyword">var</span> files = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#file1&#x27;</span>).files<br> <span class="hljs-keyword">if</span> (files.length &lt;= <span class="hljs-number">0</span>) &#123;<br> <span class="hljs-keyword">return</span> alert(<span class="hljs-string">&#x27;请选择要上传的文件！&#x27;</span>)<br> &#125;<br> <span class="hljs-comment">// ...后续业务逻辑</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="向FormData中追加文件"><a href="#向FormData中追加文件" class="headerlink" title="向FormData中追加文件"></a>向<code>FormData</code>中追加文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 创建 FormData 对象</span><br><span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> FormData()<br><span class="hljs-comment">// 2. 向 FormData 中追加文件</span><br>fd.append(<span class="hljs-string">&#x27;avatar&#x27;</span>, files[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h3 id="使用-xhr-发起上传文件的请求"><a href="#使用-xhr-发起上传文件的请求" class="headerlink" title="使用 xhr 发起上传文件的请求"></a>使用 <code>xhr</code> 发起上传文件的请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 创建 xhr 对象</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br><span class="hljs-comment">// 2. 调用 open 函数，指定请求类型与URL地址。其中，请求类型必须为 POST</span><br>xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>)<br><span class="hljs-comment">// 3. 发起请求</span><br>xhr.send(fd)<br></code></pre></td></tr></table></figure><h3 id="监听onreadystatechange事件"><a href="#监听onreadystatechange事件" class="headerlink" title="监听onreadystatechange事件"></a>监听<code>onreadystatechange</code>事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span> &amp;&amp; xhr.status === <span class="hljs-number">200</span>) &#123;<br>  <span class="hljs-keyword">var</span> data = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText)<br>     <span class="hljs-keyword">if</span> (data.status === <span class="hljs-number">200</span>) &#123; <span class="hljs-comment">// 上传文件成功</span><br>     <span class="hljs-comment">// 将服务器返回的图片地址，设置为 &lt;img&gt; 标签的 src 属性</span><br>        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#img&#x27;</span>).src = <span class="hljs-string">&#x27;http://www.liulongbin.top:3006&#x27;</span> + data.url<br>     &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 上传文件失败</span><br>         <span class="hljs-built_in">console</span>.log(data.message)<br>     &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="显示文件上传进度"><a href="#显示文件上传进度" class="headerlink" title="显示文件上传进度"></a>显示文件上传进度</h5><h5 id="计算文件上传进度"><a href="#计算文件上传进度" class="headerlink" title="计算文件上传进度"></a>计算文件上传进度</h5><p>新版本的 <code>XMLHttpRequest</code> 对象中，可以通过监听 <code>xhr.upload.onprogress</code> 事件，来获取到文件的上传进度。语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建 XHR 对象</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br><span class="hljs-comment">// 监听 xhr.upload 的 onprogress 事件</span><br>xhr.upload.onprogress = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>     <span class="hljs-comment">// e.lengthComputable 是一个布尔值，表示当前上传的资源是否具有可计算的长度</span><br>     <span class="hljs-keyword">if</span> (e.lengthComputable) &#123;<br>         <span class="hljs-comment">// e.loaded 已传输的字节</span><br>         <span class="hljs-comment">// e.total 需传输的总字节</span><br>         <span class="hljs-keyword">var</span> percentComplete = <span class="hljs-built_in">Math</span>.ceil((e.loaded / e.total) * <span class="hljs-number">100</span>)<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h5 id="导入需要的库"><a href="#导入需要的库" class="headerlink" title="导入需要的库"></a>导入需要的库</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./lib/bootstrap.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于Bootstrap渲染进度条"><a href="#基于Bootstrap渲染进度条" class="headerlink" title="基于Bootstrap渲染进度条"></a>基于<code>Bootstrap</code>渲染进度条</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 进度条 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 500px; margin: 10px 0;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar progress-bar-info progress-barstriped active&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;percent&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 0%&quot;</span>&gt;</span><br>    0%<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="动态设置到进度条上"><a href="#动态设置到进度条上" class="headerlink" title="动态设置到进度条上"></a>动态设置到进度条上</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.upload.onprogress = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>     <span class="hljs-keyword">if</span> (e.lengthComputable) &#123;<br>         <span class="hljs-comment">// 1. 计算出当前上传进度的百分比</span><br>         <span class="hljs-keyword">var</span> percentComplete = <span class="hljs-built_in">Math</span>.ceil((e.loaded / e.total) * <span class="hljs-number">100</span>)<br>         $(<span class="hljs-string">&#x27;#percent&#x27;</span>)<br>         <span class="hljs-comment">// 2. 设置进度条的宽度</span><br>         .attr(<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;width:&#x27;</span> + percentComplete + <span class="hljs-string">&#x27;%&#x27;</span>)<br>         <span class="hljs-comment">// 3. 显示当前的上传进度百分比</span><br>         .html(percentComplete + <span class="hljs-string">&#x27;%&#x27;</span>)<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="监听上传完成的事件"><a href="#监听上传完成的事件" class="headerlink" title="监听上传完成的事件"></a>监听上传完成的事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.upload.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     $(<span class="hljs-string">&#x27;#percent&#x27;</span>)<br>     <span class="hljs-comment">// 移除上传中的类样式</span><br>     .removeClass()<br>     <span class="hljs-comment">// 添加上传完成的类样式</span><br>     .addClass(<span class="hljs-string">&#x27;progress-bar progress-bar-success&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="jQuery高级用法-jQuery实现文件上传"><a href="#jQuery高级用法-jQuery实现文件上传" class="headerlink" title="jQuery高级用法- jQuery实现文件上传"></a><code>jQuery</code>高级用法- <code>jQuery</code>实现文件上传</h4><h5 id="定义UI结构-1"><a href="#定义UI结构-1" class="headerlink" title="定义UI结构"></a>定义<code>UI</code>结构</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 导入 jQuery --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 文件选择框 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file1&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 上传文件按钮 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnUpload&quot;</span>&gt;</span>上传<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="验证是否选择了文件-1"><a href="#验证是否选择了文件-1" class="headerlink" title="验证是否选择了文件"></a>验证是否选择了文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#btnUpload&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-comment">// 1. 将 jQuery 对象转化为 DOM 对象，并获取选中的文件列表</span><br>     <span class="hljs-keyword">var</span> files = $(<span class="hljs-string">&#x27;#file1&#x27;</span>)[<span class="hljs-number">0</span>].files<br>     <span class="hljs-comment">// 2. 判断是否选择了文件</span><br>     <span class="hljs-keyword">if</span> (files.length &lt;= <span class="hljs-number">0</span>) &#123;<br>     <span class="hljs-keyword">return</span> alert(<span class="hljs-string">&#x27;请选择图片后再上传！‘)</span><br><span class="hljs-string">     &#125;</span><br><span class="hljs-string">&#125;)</span><br></code></pre></td></tr></table></figure><h5 id="向FormData中追加文件-1"><a href="#向FormData中追加文件-1" class="headerlink" title="向FormData中追加文件"></a>向<code>FormData</code>中追加文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 向 FormData 中追加文件</span><br><span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> FormData()<br>fd.append(<span class="hljs-string">&#x27;avatar&#x27;</span>, files[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h5 id="使用jQuery发起上传文件的请求"><a href="#使用jQuery发起上传文件的请求" class="headerlink" title="使用jQuery发起上传文件的请求"></a>使用<code>jQuery</code>发起上传文件的请求</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>     method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>     url: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>,<br>     data: fd,<br>     <span class="hljs-comment">// 不修改 Content-Type 属性，使用 FormData 默认的 Content-Type 值</span><br>     contentType: <span class="hljs-literal">false</span>,<br>     <span class="hljs-comment">// 不对 FormData 中的数据进行 url 编码，而是将 FormData 数据原样发送到服务器</span><br>     processData: <span class="hljs-literal">false</span>,<br>     success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(res)<br>     &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="jQuery实现loading效果"><a href="#jQuery实现loading效果" class="headerlink" title="jQuery实现loading效果"></a><code>jQuery</code>实现<code>loading</code>效果</h5><h5 id="ajaxStart-callback"><a href="#ajaxStart-callback" class="headerlink" title="ajaxStart(callback)"></a><code>ajaxStart(callback)</code></h5><p><code>Ajax</code> 请求<strong>开始</strong>时，执行 <code>ajaxStart</code> 函数。可以在 <code>ajaxStart</code> 的 <code>callback</code> 中显示 <code>loading</code> 效果，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 自 jQuery 版本 1.8 起，该方法只能被附加到文档</span><br>$(<span class="hljs-built_in">document</span>).ajaxStart(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-string">&#x27;#loading&#x27;</span>).show()<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> <code>$(document).ajaxStart()</code> 函数<strong>会监听当前文档内所有的 Ajax 请求</strong>。</p><h3 id="ajaxStop-callback"><a href="#ajaxStop-callback" class="headerlink" title="ajaxStop(callback)"></a><code>ajaxStop(callback)</code></h3><p><code>Ajax</code> 请求<strong>结束</strong>时，执行 <code>ajaxStop</code> 函数。可以在 <code>ajaxStop</code> 的 <code>callback</code> 中隐藏 <code>loading</code> 效果，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 自 jQuery 版本 1.8 起，该方法只能被附加到文档</span><br>$(<span class="hljs-built_in">document</span>).ajaxStop(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-string">&#x27;#loading&#x27;</span>).hide()<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="axios"><a href="#axios" class="headerlink" title="`axios"></a>`axios</h4><h5 id="什么是axios"><a href="#什么是axios" class="headerlink" title="什么是axios"></a>什么是<code>axios</code></h5><p><code>Axios</code> 是专注于<strong>网络数据请求</strong>的库。</p><p>相比于原生的 <code>XMLHttpRequest</code> 对象，<code>axios</code> <strong>简单易用</strong>。</p><p>相比于 <code>jQuery</code>，<code>axios</code> 更加<strong>轻量化</strong>，只专注于网络数据请求。</p><h5 id="axios发起GET请求"><a href="#axios发起GET请求" class="headerlink" title="axios发起GET请求"></a><code>axios</code>发起GET请求</h5><p><code>axios</code> 发起 <code>get</code> 请求的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.get(<span class="hljs-string">&#x27;url&#x27;</span>, &#123; <span class="hljs-attr">params</span>: &#123; <span class="hljs-comment">/*参数*/</span> &#125; &#125;).then(callback)<br></code></pre></td></tr></table></figure><p><strong>具体的请求示例如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 请求的 URL 地址</span><br><span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span><br><span class="hljs-comment">// 请求的参数对象</span><br><span class="hljs-keyword">var</span> paramsObj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;<br><span class="hljs-comment">// 调用 axios.get() 发起 GET 请求</span><br>axios.get(url, &#123; <span class="hljs-attr">params</span>: paramsObj &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>     <span class="hljs-comment">// res.data 是服务器返回的数据</span><br>     <span class="hljs-keyword">var</span> result = res.data<br>     <span class="hljs-built_in">console</span>.log(res)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="axios发起POST请求"><a href="#axios发起POST请求" class="headerlink" title="axios发起POST请求"></a><code>axios</code>发起<code>POST</code>请求</h5><p><code>axios</code> 发起 <code>post</code> 请求的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.post(<span class="hljs-string">&#x27;url&#x27;</span>, &#123; <span class="hljs-comment">/*参数*/</span> &#125;).then(callback)<br></code></pre></td></tr></table></figure><p><strong>具体的请求示例如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 请求的 URL 地址</span><br><span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span><br><span class="hljs-comment">// 要提交到服务器的数据</span><br><span class="hljs-keyword">var</span> dataObj = &#123; <span class="hljs-attr">location</span>: <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;顺义&#x27;</span> &#125;<br><span class="hljs-comment">// 调用 axios.post() 发起 POST 请求</span><br>axios.post(url, dataObj).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>     <span class="hljs-comment">// res.data 是服务器返回的数据</span><br>     <span class="hljs-keyword">var</span> result = res.data<br>     <span class="hljs-built_in">console</span>.log(result)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="直接使用axios发起请求"><a href="#直接使用axios发起请求" class="headerlink" title="直接使用axios发起请求"></a>直接使用<code>axios</code>发起请求</h5><p><code>axios</code> 也提供了类似于 <code>jQuery</code> 中 <code>$.ajax()</code> 的函数，语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios(&#123;<br> method: <span class="hljs-string">&#x27;请求类型&#x27;</span>,<br> url: <span class="hljs-string">&#x27;请求的URL地址&#x27;</span>,<br> data: &#123; <span class="hljs-comment">/* POST数据 */</span> &#125;,<br> params: &#123; <span class="hljs-comment">/* GET参数 */</span> &#125;<br>&#125;).then(callback)<br></code></pre></td></tr></table></figure><p><strong>发起get请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#btn3&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span><br>      <span class="hljs-keyword">var</span> paramsData = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;钢铁侠&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">35</span> &#125;<br>      axios(&#123;<br>        method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        url: url,<br>        params: paramsData<br>      &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(res.data)<br>      &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>发起post请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#btn4&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  axios(&#123;<br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,<br>    data: &#123;<br>      name: <span class="hljs-string">&#x27;娃哈哈&#x27;</span>,<br>      age: <span class="hljs-number">18</span>,<br>      gender: <span class="hljs-string">&#x27;女&#x27;</span><br>    &#125;<br>  &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res.data)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/01/28/index/"/>
    <url>/2021/01/28/index/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>你好,阅览者</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
